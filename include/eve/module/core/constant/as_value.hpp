//==================================================================================================
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
/*
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  EVE - Expressive Vector Engine
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  Copyright : EVE Contributors & Maintainers
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  SPDX-License-Identifier: MIT
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
*/
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
//==================================================================================================
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
#pragma once
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp

llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
#include <eve/concept/value.hpp>
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
#include <eve/detail/implementation.hpp>
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
#include <eve/as.hpp>
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp

llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
#include <concepts>
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp

llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
namespace eve
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
{
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //================================================================================================
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //! @addtogroup core_constants
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //! @{
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!   @var as_value
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!   @brief Converts an eve constant or just a value to a type.
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!   **Defined in Header**
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!   @code
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!   #include <eve/module/core.hpp>
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!   @endcode
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!   @groupheader{Callable Signatures}
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!   @code
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!   namespace eve
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!   {
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!      template< typename From, eve::value T >
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!      T as_value(From f, as<T> const & t) noexcept;
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!   }
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!   @endcode
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!   **Parameters**
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!     * `from` :  either anything convertible to T or an eve constant.
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!   **Return value**
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!       T equivalent of from
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!  @groupheader{Example}
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //!  @godbolt{doc/core/constant/as_value.cpp}
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //! @}
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  //================================================================================================
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp

llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  EVE_MAKE_CALLABLE(as_value_, as_value);
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp

llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  namespace detail
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  {
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
    template<typename From, value T>
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
    EVE_FORCEINLINE constexpr auto as_value_(EVE_SUPPORTS(cpu_), From from, as<T> const & t) noexcept
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
    {
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
           if constexpr ( !value<From>                               ) return from(t);
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
      else if constexpr ( std::integral<T> || std::floating_point<T> ) return (T)from;
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
      else                                                             return T{from};
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
    }
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
  }
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
}
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
llbits.hpp
