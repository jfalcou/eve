//==================================================================================================
/*
  EVE - Expressive Vector Engine
  Copyright : EVE Contributors & Maintainers
  SPDX-License-Identifier: MIT
*/
//==================================================================================================
#pragma once

#include <eve/detail/concepts.hpp>
#include <climits>
#include <cstdint>

namespace eve
{
  //================================================================================================
  //! @addtogroup utility
  //! @{
  //================================================================================================
  //! @brief Checks if `v` is a power of two
  //================================================================================================
  template<std::integral T> constexpr bool is_power_of_2(T v) noexcept
  {
    return (!(v & (v - 1)) && v);
  }

  //================================================================================================
  //! @brief Computes the power of two greater or equal to `v`
  //================================================================================================
  template<std::integral T> constexpr T next_power_of_2(T v) noexcept
  {
    v--;
    for(std::size_t i = 1; i < sizeof(v) * CHAR_BIT; i *= 2) v |= v >> i;

    return ++v;
  }

  //================================================================================================
  //! @brief Computes the power of two lesser or equal to `v`
  //================================================================================================
  template<std::integral T> constexpr T prev_power_of_2(T v) noexcept
  {
    for(std::size_t i = 1; i < sizeof(v) * CHAR_BIT; i *= 2) v |= v >> i;

    return v ? (v >> 1) + 1 : v;
  }

  //================================================================================================
  //! @}
  //================================================================================================
}

