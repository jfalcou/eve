##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright 2019 Joel FALCOU
##  Copyright 2019 Jean-Thierry Lapreste
##
##  Licensed under the MIT License <http://opensource.org/licenses/MIT>.
##  SPDX-License-Identifier: MIT
##==================================================================================================

##==================================================================================================
## Setup aggregation of tests
##==================================================================================================
add_custom_target(exhaustive.math.unit)
add_custom_target(exhaustive.math.scalar.unit)
add_custom_target(exhaustive.math.simd.unit)
add_dependencies(exhaustive.math.unit exhaustive.math.scalar.unit)
add_dependencies(exhaustive.math.unit exhaustive.math.simd.unit)
add_dependencies(exhaustive.scalar.unit exhaustive.math.scalar.unit)
add_dependencies(exhaustive.simd.unit exhaustive.math.simd.unit)
add_dependencies(exhaustive.unit exhaustive.math.unit)

##==================================================================================================
## Elementwise function unit tests
##==================================================================================================
make_all_units(ROOT exhaustive.math NAME acos                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME acosd                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME acosh                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME acospi                ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME acot                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME acotd                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME acoth                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME acotpi                ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME acsc                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME acscd                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME acsch                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME acscpi                ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME asec                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME asecd                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME asech                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME asecpi                ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME asin                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME asind                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME asinh                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME asinpi                ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME atan                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME atand                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME atanh                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME atanpi                ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME cos                   ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME cosd                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME cospi                 ARCH scalar simd TYPES ${signed_types_32}  )
make_all_units(ROOT exhaustive.math NAME cosh                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME cot                   ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME cotd                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME coth                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME cotpi                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME csc                   ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME cscd                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME csch                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME cscpi                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME deginrad              ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME exp                   ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME exp10                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME exp2                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME expm1                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME log                   ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME log10                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME log1p                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME log2                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME radindeg              ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME radinpi               ARCH scalar simd TYPES ${real_types_32}    )
##make_all_units(ROOT exhaustive.math NAME rempio2               ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME sec                   ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME secd                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME sech                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME secpi                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME sin                   ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME sincos                ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME sind                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME sindcosd              ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME sinh                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME sinhcosh              ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME sinpi                 ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME sinpicospi            ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME tan                   ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME tand                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME tanh                  ARCH scalar simd TYPES ${real_types_32}    )
make_all_units(ROOT exhaustive.math NAME tanpi                 ARCH scalar simd TYPES ${real_types_32}    )
