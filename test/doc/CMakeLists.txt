##==================================================================================================
##  EVE - Expressive Vector Engine
##
##  Copyright 2019 Joel FALCOU
##  Copyright 2019 Jean-Thierry LAPRESTE
##
##  Licensed under the MIT License <http://opensource.org/licenses/MIT>.
##  SPDX-License-Identifier: MIT
##==================================================================================================

##==================================================================================================
## documentation tests - core
##==================================================================================================
add_subdirectory(core)
<<<<<<< HEAD
=======
=======
## documentation tests
<<<<<<< HEAD
<<<<<<< HEAD
=======

=======
<<<<<<< HEAD
>>>>>>> exponentbits first pass
>>>>>>> exponentbits first pass
make_unit( "doc.function.predicates" binarize.cpp )
make_unit( "doc.function.predicates" binarize_c.cpp )
make_unit( "doc.function.arithmetic" deco.cpp )
make_unit( "doc.function.arithmetic" abs.cpp )
make_unit( "doc.function.arithmetic" all.cpp )
make_unit( "doc.function.invtrig" acos.cpp )
make_unit( "doc.function.invtrig" acot.cpp )
make_unit( "doc.function.invtrig" acsc.cpp )
make_unit( "doc.function.invtrig" asec.cpp )
make_unit( "doc.function.invtrig" asin.cpp )
make_unit( "doc.function.invtrig" atan2.cpp )
make_unit( "doc.function.invtrig" atan2d.cpp )
make_unit( "doc.function.invtrig" atan2pi.cpp )
make_unit( "doc.function.invtrig" atan.cpp  )
make_unit( "doc.function.invtrig" acosd.cpp )
make_unit( "doc.function.invtrig" acospi.cpp )
make_unit( "doc.function.invtrig" acotd.cpp )
make_unit( "doc.function.invtrig" acotpi.cpp )
make_unit( "doc.function.invtrig" acscd.cpp )
make_unit( "doc.function.invtrig" acscpi.cpp )
make_unit( "doc.function.invtrig" asecd.cpp )
make_unit( "doc.function.invtrig" asecpi.cpp )
make_unit( "doc.function.invtrig" asind.cpp )
make_unit( "doc.function.invtrig" asinpi.cpp )
make_unit( "doc.function.invtrig" atand.cpp  )
make_unit( "doc.function.invtrig" atanpi.cpp  )
make_unit( "doc.function.arithmetic" indeg.cpp )
make_unit( "doc.function.arithmetic" inpi.cpp )
make_unit( "doc.function.arithmetic" trunc.cpp )
make_unit( "doc.function.arithmetic" frac.cpp )
make_unit( "doc.function.arithmetic" nearest.cpp )
make_unit( "doc.function.arithmetic" ceil.cpp )
make_unit( "doc.function.arithmetic" convert.cpp )
make_unit( "doc.function.arithmetic" floor.cpp )
make_unit( "doc.function.arithmetic" round.cpp )
make_unit( "doc.function.arithmetic" min.cpp )
make_unit( "doc.function.arithmetic" maxmag.cpp )
make_unit( "doc.function.arithmetic" minmag.cpp )
make_unit( "doc.function.arithmetic" minnummag.cpp )
make_unit( "doc.function.arithmetic" maxnummag.cpp )
make_unit( "doc.function.arithmetic" max.cpp )
make_unit( "doc.function.arithmetic" oneminus.cpp )
make_unit( "doc.function.arithmetic" dist.cpp )
make_unit( "doc.function.arithmetic" bitwise_shl.cpp )
make_unit( "doc.function.arithmetic" fma.cpp )
make_unit( "doc.function.arithmetic" fnma.cpp )
make_unit( "doc.function.arithmetic" fms.cpp )
make_unit( "doc.function.arithmetic" fnms.cpp )
make_unit( "doc.function.arithmetic" shl.cpp )
make_unit( "doc.function.arithmetic" shr.cpp )
make_unit( "doc.function.arithmetic" rshl.cpp )
make_unit( "doc.function.arithmetic" rshr.cpp )
make_unit( "doc.function.bitwise" bitwise_and.cpp )
make_unit( "doc.function.bitwise" average.cpp )
make_unit( "doc.function.bitwise" bitwise_andnot.cpp )
make_unit( "doc.function.bitwise" bitwise_cast.cpp )
make_unit( "doc.function.bitwise" bitwise_mask.cpp )
make_unit( "doc.function.bitwise" bitwise_not.cpp )
make_unit( "doc.function.bitwise" bitwise_notand.cpp )
make_unit( "doc.function.bitwise" bitwise_notor.cpp )
make_unit( "doc.function.bitwise" bitwise_or.cpp )
make_unit( "doc.function.bitwise" bitwise_ornot.cpp )
make_unit( "doc.function.bitwise" bitwise_select.cpp )
make_unit( "doc.function.bitwise" bitwise_shl.cpp )
make_unit( "doc.function.bitwise" bitwise_shr.cpp )
make_unit( "doc.function.bitwise" bitwise_xor.cpp )
make_unit( "doc.function.logical" logical_and.cpp )
make_unit( "doc.function.logical" logical_andnot.cpp )
make_unit( "doc.function.logical" logical_not.cpp )
make_unit( "doc.function.logical" logical_notand.cpp )
make_unit( "doc.function.logical" logical_notor.cpp )
make_unit( "doc.function.logical" logical_or.cpp )
make_unit( "doc.function.logical" logical_ornot.cpp )
make_unit( "doc.function.logical" logical_xor.cpp )
make_unit( "doc.function.operators" add.cpp )
make_unit( "doc.function.operators" mul.cpp )
make_unit( "doc.function.operators" if_else.cpp )
make_unit( "doc.function.operators" if_add.cpp )
make_unit( "doc.function.operators" if_mul.cpp )
make_unit( "doc.function.operators" if_sub.cpp )
make_unit( "doc.function.operators" if_else_zero.cpp )
make_unit( "doc.function.operators" if_zero_else.cpp )
make_unit( "doc.function.operators" if_else_allbits.cpp )
make_unit( "doc.function.operators" if_else_one.cpp )
make_unit( "doc.function.operators" if_else_mone.cpp )
make_unit( "doc.function.operators" if_allbits_else.cpp )
make_unit( "doc.function.operators" if_one_else.cpp )
make_unit( "doc.function.operators" if_mone_else.cpp )
make_unit( "doc.function.operators" ifnot_else.cpp )
make_unit( "doc.function.operators" sub.cpp )
make_unit( "doc.function.predicate" is_denormal.cpp )
make_unit( "doc.function.predicate" sign.cpp )
make_unit( "doc.function.predicate" signnz.cpp )
make_unit( "doc.function.predicate" bitofsign.cpp )
make_unit( "doc.function.predicate" copysign.cpp )
make_unit( "doc.function.predicate" is_equal.cpp )
make_unit( "doc.function.predicate" is_equal_with_equal_nans.cpp )
make_unit( "doc.function.predicate" is_eqz.cpp )
make_unit( "doc.function.predicate" inc.cpp )
make_unit( "doc.function.predicate" dec.cpp )
make_unit( "doc.function.predicate" sqr.cpp )
make_unit( "doc.function.predicate" sqr_abs.cpp )
make_unit( "doc.function.predicate" conj.cpp )
make_unit( "doc.function.predicate" arg.cpp )
make_unit( "doc.function.predicate" is_finite.cpp )
make_unit( "doc.function.predicate" is_flint.cpp )
make_unit( "doc.function.predicate" is_even.cpp )
make_unit( "doc.function.predicate" is_odd.cpp )
make_unit( "doc.function.predicate" is_greater.cpp )
make_unit( "doc.function.predicate" is_gtz.cpp )
make_unit( "doc.function.predicate" is_imag.cpp )
make_unit( "doc.function.predicate" is_not_real.cpp )
make_unit( "doc.function.predicate" is_real.cpp )
make_unit( "doc.function.predicate" is_not_imag.cpp )
make_unit( "doc.function.predicate" is_gez.cpp )
make_unit( "doc.function.predicate" is_greater_equal.cpp )
make_unit( "doc.function.predicate" is_infinite.cpp )
make_unit( "doc.function.predicate" is_less.cpp )
make_unit( "doc.function.predicate" is_less_equal.cpp )
make_unit( "doc.function.predicate" is_lessgreater.cpp )
make_unit( "doc.function.predicate" is_lez.cpp)
make_unit( "doc.function.predicate" is_ltz.cpp)
make_unit( "doc.function.predicate" is_nan.cpp )
make_unit( "doc.function.predicate" is_nez.cpp )
make_unit( "doc.function.predicate" is_ngez.cpp )
make_unit( "doc.function.predicate" is_ngtz.cpp )
make_unit( "doc.function.predicate" is_nlez.cpp )
make_unit( "doc.function.predicate" is_nltz.cpp )
make_unit( "doc.function.predicate" is_not_denormal.cpp )
make_unit( "doc.function.predicate" is_normal.cpp )
make_unit( "doc.function.predicate" is_negative.cpp )
make_unit( "doc.function.predicate" is_not_equal.cpp )
make_unit( "doc.function.predicate" is_not_equal_with_equal_nans.cpp )
make_unit( "doc.function.predicate" is_not_finite.cpp )
make_unit( "doc.function.predicate" is_not_greater.cpp )
make_unit( "doc.function.predicate" is_not_inf.cpp )
make_unit( "doc.function.predicate" is_not_less.cpp )
make_unit( "doc.function.predicate" is_not_less_equal.cpp )
make_unit( "doc.function.predicate" is_not_nan.cpp )
make_unit( "doc.function.predicate" is_ordered.cpp )
make_unit( "doc.function.predicate" is_unordered.cpp )
=======
add_unit_test( "doc.function.predicates" convert.cpp )
add_unit_test( "doc.function.ieee" ldexp.cpp )
add_unit_test( "doc.function.ieee" ifrexp.cpp )
add_unit_test( "doc.function.ieee" cbrt.cpp )
add_unit_test( "doc.function.ieee" exp.cpp )
add_unit_test( "doc.function.ieee" cosh.cpp )
add_unit_test( "doc.function.ieee" sinh.cpp )
add_unit_test( "doc.function.ieee" exp2.cpp )
add_unit_test( "doc.function.ieee" expm1.cpp )
add_unit_test( "doc.function.ieee" exp10.cpp )
add_unit_test( "doc.function.ieee" frexp.cpp )
add_unit_test( "doc.function.ieee" exponent.cpp )
add_unit_test( "doc.function.ieee" mantissa.cpp )
add_unit_test( "doc.function.ieee" exponentbits.cpp )
add_unit_test( "doc.function.predicates" binarize.cpp )
add_unit_test( "doc.function.predicates" binarize_c.cpp )
add_unit_test( "doc.function.arithmetic" deco.cpp )
add_unit_test( "doc.function.arithmetic" abs.cpp )
add_unit_test( "doc.function.arithmetic" next.cpp )
add_unit_test( "doc.function.arithmetic" prev.cpp )
add_unit_test( "doc.function.arithmetic" exponent.cpp )
add_unit_test( "doc.function.arithmetic" mantissa.cpp )
add_unit_test( "doc.function.arithmetic" all.cpp )
<<<<<<< HEAD
add_unit_test( "doc.function.arithmetic" any.cpp )
=======
>>>>>>> exponentbits first pass
add_unit_test( "doc.function.invtrig" acos.cpp )
add_unit_test( "doc.function.invtrig" acot.cpp ) 
add_unit_test( "doc.function.invtrig" acsc.cpp )
add_unit_test( "doc.function.invtrig" asec.cpp )     
add_unit_test( "doc.function.invtrig" asin.cpp )
add_unit_test( "doc.function.invtrig" atan2.cpp )
add_unit_test( "doc.function.invtrig" atan2d.cpp )
add_unit_test( "doc.function.invtrig" atan2pi.cpp )
add_unit_test( "doc.function.invtrig" atan.cpp  )
add_unit_test( "doc.function.invtrig" acosd.cpp )
add_unit_test( "doc.function.invtrig" acospi.cpp )
add_unit_test( "doc.function.invtrig" acotd.cpp )  
add_unit_test( "doc.function.invtrig" acotpi.cpp )  
add_unit_test( "doc.function.invtrig" acscd.cpp )
add_unit_test( "doc.function.invtrig" acscpi.cpp )
add_unit_test( "doc.function.invtrig" asecd.cpp )     
add_unit_test( "doc.function.invtrig" asecpi.cpp )     
add_unit_test( "doc.function.invtrig" asind.cpp )
add_unit_test( "doc.function.invtrig" asinpi.cpp )
add_unit_test( "doc.function.invtrig" atand.cpp  )
add_unit_test( "doc.function.invtrig" atanpi.cpp  )
add_unit_test( "doc.function.arithmetic" indeg.cpp )
add_unit_test( "doc.function.arithmetic" inpi.cpp )
add_unit_test( "doc.function.arithmetic" trunc.cpp )
add_unit_test( "doc.function.arithmetic" frac.cpp )
add_unit_test( "doc.function.arithmetic" nearest.cpp )
add_unit_test( "doc.function.arithmetic" ceil.cpp )
add_unit_test( "doc.function.arithmetic" floor.cpp )
add_unit_test( "doc.function.arithmetic" round.cpp )
add_unit_test( "doc.function.arithmetic" min.cpp )
add_unit_test( "doc.function.arithmetic" maxmag.cpp )
add_unit_test( "doc.function.arithmetic" minmag.cpp )
add_unit_test( "doc.function.arithmetic" minnummag.cpp )
add_unit_test( "doc.function.arithmetic" maxnummag.cpp )
add_unit_test( "doc.function.arithmetic" max.cpp )
add_unit_test( "doc.function.arithmetic" oneminus.cpp )
add_unit_test( "doc.function.arithmetic" dist.cpp )
add_unit_test( "doc.function.arithmetic" bitwise_shl.cpp )
add_unit_test( "doc.function.arithmetic" fma.cpp )
add_unit_test( "doc.function.arithmetic" fnma.cpp )
add_unit_test( "doc.function.arithmetic" fms.cpp )
add_unit_test( "doc.function.arithmetic" fnms.cpp )
add_unit_test( "doc.function.arithmetic" shl.cpp )
add_unit_test( "doc.function.arithmetic" shr.cpp )
add_unit_test( "doc.function.arithmetic" rshl.cpp )
add_unit_test( "doc.function.arithmetic" rshr.cpp )
add_unit_test( "doc.function.bitwise" bitwise_and.cpp )
add_unit_test( "doc.function.bitwise" average.cpp )
add_unit_test( "doc.function.bitwise" nextafter.cpp )
add_unit_test( "doc.function.bitwise" bitwise_andnot.cpp )
add_unit_test( "doc.function.bitwise" bitwise_cast.cpp )
add_unit_test( "doc.function.bitwise" bitwise_mask.cpp )
add_unit_test( "doc.function.bitwise" bitwise_not.cpp )
add_unit_test( "doc.function.bitwise" bitwise_notand.cpp )
add_unit_test( "doc.function.bitwise" bitwise_notor.cpp )
add_unit_test( "doc.function.bitwise" bitwise_or.cpp )
add_unit_test( "doc.function.bitwise" bitwise_ornot.cpp )
add_unit_test( "doc.function.bitwise" bitwise_select.cpp )
add_unit_test( "doc.function.bitwise" bitwise_shl.cpp )
add_unit_test( "doc.function.bitwise" bitwise_shr.cpp )
add_unit_test( "doc.function.bitwise" bitwise_xor.cpp )
add_unit_test( "doc.function.logical" logical_and.cpp )
add_unit_test( "doc.function.logical" logical_andnot.cpp )
add_unit_test( "doc.function.logical" logical_not.cpp )
add_unit_test( "doc.function.logical" logical_notand.cpp )
add_unit_test( "doc.function.logical" logical_notor.cpp )
add_unit_test( "doc.function.logical" logical_or.cpp )
add_unit_test( "doc.function.logical" logical_ornot.cpp )
add_unit_test( "doc.function.logical" logical_xor.cpp )
add_unit_test( "doc.function.operators" add.cpp )
add_unit_test( "doc.function.operators" mul.cpp )
add_unit_test( "doc.function.operators" if_else.cpp )
add_unit_test( "doc.function.operators" if_add.cpp )
add_unit_test( "doc.function.operators" if_mul.cpp )
add_unit_test( "doc.function.operators" if_sub.cpp )
add_unit_test( "doc.function.operators" if_else_zero.cpp )
add_unit_test( "doc.function.operators" if_zero_else.cpp )
add_unit_test( "doc.function.operators" if_else_allbits.cpp )
add_unit_test( "doc.function.operators" if_else_one.cpp )
add_unit_test( "doc.function.operators" if_else_mone.cpp )
add_unit_test( "doc.function.operators" if_allbits_else.cpp )
add_unit_test( "doc.function.operators" if_one_else.cpp )
add_unit_test( "doc.function.operators" if_mone_else.cpp )
add_unit_test( "doc.function.operators" ifnot_else.cpp )
add_unit_test( "doc.function.operators" sub.cpp )
add_unit_test( "doc.function.predicate" is_denormal.cpp )
add_unit_test( "doc.function.predicate" sign.cpp )
add_unit_test( "doc.function.predicate" signnz.cpp )
add_unit_test( "doc.function.predicate" bitofsign.cpp )
add_unit_test( "doc.function.predicate" copysign.cpp )
add_unit_test( "doc.function.predicate" is_equal.cpp )
add_unit_test( "doc.function.predicate" is_equal_with_equal_nans.cpp )
add_unit_test( "doc.function.predicate" is_eqz.cpp )
add_unit_test( "doc.function.predicate" inc.cpp )
add_unit_test( "doc.function.predicate" dec.cpp )
add_unit_test( "doc.function.predicate" sqr.cpp )
add_unit_test( "doc.function.predicate" sqr_abs.cpp )
add_unit_test( "doc.function.predicate" conj.cpp )
add_unit_test( "doc.function.predicate" arg.cpp )
<<<<<<< HEAD
=======
add_unit_test( "doc.function.predicate" exponentbits.cpp )
>>>>>>> exponentbits first pass
add_unit_test( "doc.function.predicate" is_finite.cpp )
add_unit_test( "doc.function.predicate" is_flint.cpp )
add_unit_test( "doc.function.predicate" is_even.cpp )
add_unit_test( "doc.function.predicate" is_odd.cpp )
add_unit_test( "doc.function.predicate" is_greater.cpp )
add_unit_test( "doc.function.predicate" is_gtz.cpp )
add_unit_test( "doc.function.predicate" is_imag.cpp )
add_unit_test( "doc.function.predicate" is_not_real.cpp )
add_unit_test( "doc.function.predicate" is_real.cpp )
add_unit_test( "doc.function.predicate" is_not_imag.cpp )
add_unit_test( "doc.function.predicate" is_gez.cpp )
add_unit_test( "doc.function.predicate" is_greater_equal.cpp )
add_unit_test( "doc.function.predicate" is_infinite.cpp )
add_unit_test( "doc.function.predicate" is_less.cpp )
add_unit_test( "doc.function.predicate" is_less_equal.cpp )
add_unit_test( "doc.function.predicate" is_lessgreater.cpp )
add_unit_test( "doc.function.predicate" is_lez.cpp)
add_unit_test( "doc.function.predicate" is_ltz.cpp)
add_unit_test( "doc.function.predicate" is_nan.cpp )
add_unit_test( "doc.function.predicate" is_nez.cpp )
add_unit_test( "doc.function.predicate" is_ngez.cpp )
add_unit_test( "doc.function.predicate" is_ngtz.cpp )
add_unit_test( "doc.function.predicate" is_nlez.cpp )
add_unit_test( "doc.function.predicate" is_nltz.cpp )
add_unit_test( "doc.function.predicate" is_not_denormal.cpp )
add_unit_test( "doc.function.predicate" is_normal.cpp )
add_unit_test( "doc.function.predicate" is_negative.cpp )
add_unit_test( "doc.function.predicate" is_not_equal.cpp )
add_unit_test( "doc.function.predicate" is_not_equal_with_equal_nans.cpp )
add_unit_test( "doc.function.predicate" is_not_finite.cpp )
add_unit_test( "doc.function.predicate" is_not_greater.cpp )
add_unit_test( "doc.function.predicate" is_not_inf.cpp )
add_unit_test( "doc.function.predicate" is_not_less.cpp )
add_unit_test( "doc.function.predicate" is_not_less_equal.cpp )
add_unit_test( "doc.function.predicate" is_not_nan.cpp )
add_unit_test( "doc.function.predicate" is_ordered.cpp )
add_unit_test( "doc.function.predicate" is_unordered.cpp )
<<<<<<< HEAD
>>>>>>> any
>>>>>>> any
=======
>>>>>>> exponentbits first pass
>>>>>>> exponentbits first pass
>>>>>>> exponentbits first pass
>>>>>>> exponentbits first pass
