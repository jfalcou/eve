##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright 2018 Joel FALCOU
##  Copyright 2019 Jean-Thierry LAPRESTE
##
##  Licensed under the MIT License <http://opensource.org/licenses/MIT>.
##  SPDX-License-Identifier: MIT
##==================================================================================================

##==================================================================================================
## documentation tests
add_unit_test( "doc.function.arithmetic" abs.cpp )
add_unit_test( "doc.function.arithmetic" min.cpp )
add_unit_test( "doc.function.arithmetic" max.cpp )
add_unit_test( "doc.function.arithmetic" bitwise_shl.cpp )
add_unit_test( "doc.function.arithmetic" shl.cpp )
add_unit_test( "doc.function.arithmetic" shr.cpp )
add_unit_test( "doc.function.bitwise" bitwise_and.cpp )
add_unit_test( "doc.function.bitwise" bitwise_andnot.cpp )
add_unit_test( "doc.function.bitwise" bitwise_cast.cpp )
add_unit_test( "doc.function.bitwise" bitwise_mask.cpp )
add_unit_test( "doc.function.bitwise" bitwise_not.cpp )
add_unit_test( "doc.function.bitwise" bitwise_notand.cpp )
add_unit_test( "doc.function.bitwise" bitwise_notor.cpp )
add_unit_test( "doc.function.bitwise" bitwise_or.cpp )
add_unit_test( "doc.function.bitwise" bitwise_ornot.cpp )
add_unit_test( "doc.function.bitwise" bitwise_select.cpp )
add_unit_test( "doc.function.bitwise" bitwise_shl.cpp )
add_unit_test( "doc.function.bitwise" bitwise_shr.cpp )
add_unit_test( "doc.function.bitwise" bitwise_xor.cpp )
add_unit_test( "doc.function.logical" logical_and.cpp )
add_unit_test( "doc.function.logical" logical_andnot.cpp )
add_unit_test( "doc.function.logical" logical_not.cpp )
add_unit_test( "doc.function.logical" logical_notand.cpp )
add_unit_test( "doc.function.logical" logical_notor.cpp )
add_unit_test( "doc.function.logical" logical_or.cpp )
add_unit_test( "doc.function.logical" logical_ornot.cpp )
add_unit_test( "doc.function.logical" logical_xor.cpp )
add_unit_test( "doc.function.operators" add.cpp )
add_unit_test( "doc.function.operators" if_else.cpp )
add_unit_test( "doc.function.operators" if_else_zero.cpp )
add_unit_test( "doc.function.operators" ifnot_else.cpp )
add_unit_test( "doc.function.operators" sub.cpp )
add_unit_test( "doc.function.predicate" is_denormal.cpp )
add_unit_test( "doc.function.predicate" is_equal.cpp )
add_unit_test( "doc.function.predicate" is_equal_with_equal_nans.cpp )
add_unit_test( "doc.function.predicate" is_eqz.cpp )
add_unit_test( "doc.function.predicate" inc.cpp )
add_unit_test( "doc.function.predicate" dec.cpp )
#add_unit_test( "doc.function.predicate" is_even.cpp)
add_unit_test( "doc.function.predicate" is_finite.cpp )
#add_unit_test( "doc.function.predicate" is_flint.cpp )
add_unit_test( "doc.function.predicate" is_greater.cpp )
add_unit_test( "doc.function.predicate" is_gtz.cpp )
#add_unit_test( "doc.function.predicate" is_ngtz.cpp )
#add_unit_test( "doc.function.predicate" is_nlez.cpp )
#add_unit_test( "doc.function.predicate" is_nltz.cpp )
add_unit_test( "doc.function.predicate" is_imag.cpp )
add_unit_test( "doc.function.predicate" is_not_real.cpp )
add_unit_test( "doc.function.predicate" is_real.cpp )
add_unit_test( "doc.function.predicate" is_not_imag.cpp )
add_unit_test( "doc.function.predicate" is_gez.cpp )
add_unit_test( "doc.function.predicate" is_greater_equal.cpp )
add_unit_test( "doc.function.predicate" is_inf.cpp )
add_unit_test( "doc.function.predicate" is_less.cpp )
add_unit_test( "doc.function.predicate" is_less_equal.cpp )
add_unit_test( "doc.function.predicate" is_lessgreater.cpp )
add_unit_test( "doc.function.predicate" is_lez.cpp)
add_unit_test( "doc.function.predicate" is_ltz.cpp)
add_unit_test( "doc.function.predicate" is_nan.cpp )
add_unit_test( "doc.function.predicate" is_nez.cpp )
add_unit_test( "doc.function.predicate" is_ngez.cpp )
add_unit_test( "doc.function.predicate" is_ngtz.cpp )
add_unit_test( "doc.function.predicate" is_nlez.cpp )
add_unit_test( "doc.function.predicate" is_nltz.cpp )
add_unit_test( "doc.function.predicate" is_not_denormal.cpp )
add_unit_test( "doc.function.predicate" is_normal.cpp )
add_unit_test( "doc.function.predicate" is_negative.cpp )
add_unit_test( "doc.function.predicate" is_not_equal_with_equal_nans.cpp )
add_unit_test( "doc.function.predicate" is_not_finite.cpp )
add_unit_test( "doc.function.predicate" is_not_greater.cpp )
add_unit_test( "doc.function.predicate" is_not_inf.cpp )
add_unit_test( "doc.function.predicate" is_not_less.cpp )
add_unit_test( "doc.function.predicate" is_not_less_equal.cpp )
add_unit_test( "doc.function.predicate" is_not_nan.cpp )
#add_unit_test( "doc.function.predicate" is_odd.cpp )
add_unit_test( "doc.function.predicate" is_ordered.cpp )
add_unit_test( "doc.function.predicate" is_unordered.cpp )
