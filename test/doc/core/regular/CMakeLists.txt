##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright : EVE Project Contributors
##  SPDX-License-Identifier: BSL-1.0
##==================================================================================================
##==================================================================================================

make_unit( "doc.core.regular" abs.cpp                  )
make_unit( "doc.core.regular" absmax.cpp               )
make_unit( "doc.core.regular" absmin.cpp               )
make_unit( "doc.core.regular" add.cpp                  )
make_unit( "doc.core.regular" agm.cpp                  )
make_unit( "doc.core.regular" average.cpp              )
make_unit( "doc.core.regular" binarize.cpp             )
make_unit( "doc.core.regular" binarize_not.cpp         )
make_unit( "doc.core.regular" bit_and.cpp              )
make_unit( "doc.core.regular" bit_andnot.cpp           )
make_unit( "doc.core.regular" bit_cast.cpp             )
make_unit( "doc.core.regular" bit_ceil.cpp             )
make_unit( "doc.core.regular" bit_floor.cpp            )
make_unit( "doc.core.regular" bitincrement.cpp         )
make_unit( "doc.core.regular" bit_mask.cpp             )
make_unit( "doc.core.regular" bit_notand.cpp           )
make_unit( "doc.core.regular" bit_not.cpp              )
make_unit( "doc.core.regular" bit_notor.cpp            )
make_unit( "doc.core.regular" bitofsign.cpp            )
make_unit( "doc.core.regular" bit_or.cpp               )
make_unit( "doc.core.regular" bit_ornot.cpp            )
make_unit( "doc.core.regular" bit_select.cpp           )
###make_unit( "doc.core.regular" bit_shl.cpp                       )
make_unit( "doc.core.regular" bit_shr.cpp              )
make_unit( "doc.core.regular" bit_width.cpp            )
make_unit( "doc.core.regular" bit_xor.cpp              )
make_unit( "doc.core.regular" broadcast.cpp            )
make_unit( "doc.core.regular" ceil.cpp                 )
make_unit( "doc.core.regular" clamp.cpp                )
make_unit( "doc.core.regular" combine.cpp              )
make_unit( "doc.core.regular" convert.cpp              )
make_unit( "doc.core.regular" copysign.cpp             )
make_unit( "doc.core.regular" countl_one.cpp           )
make_unit( "doc.core.regular" countl_zero.cpp          )
make_unit( "doc.core.regular" countr_one.cpp           )
make_unit( "doc.core.regular" countr_zero.cpp          )
make_unit( "doc.core.regular" count_true.cpp           )
make_unit( "doc.core.regular" dec.cpp                  )
make_unit( "doc.core.regular" deco.cpp                 )
make_unit( "doc.core.regular" diff_of_prod.cpp         )
make_unit( "doc.core.regular" dist.cpp                 )
make_unit( "doc.core.regular" div.cpp                  )
make_unit( "doc.core.regular" exponent.cpp             )
make_unit( "doc.core.regular" fam.cpp                  )
make_unit( "doc.core.regular" fanm.cpp                 )
make_unit( "doc.core.regular" fdim.cpp                 )
make_unit( "doc.core.regular" firstbitset.cpp          )
make_unit( "doc.core.regular" firstbitunset.cpp        )
make_unit( "doc.core.regular" float32.cpp              )
make_unit( "doc.core.regular" float64.cpp              )
make_unit( "doc.core.regular" floating_.cpp            )
make_unit( "doc.core.regular" floor.cpp                )
make_unit( "doc.core.regular" fma.cpp                  )
make_unit( "doc.core.regular" fmod.cpp                 )
make_unit( "doc.core.regular" fms.cpp                  )
make_unit( "doc.core.regular" fnma.cpp                 )
make_unit( "doc.core.regular" fnms.cpp                 )
make_unit( "doc.core.regular" frac.cpp                 )
make_unit( "doc.core.regular" fracscale.cpp            )
make_unit( "doc.core.regular" frexp.cpp                )
make_unit( "doc.core.regular" fsm.cpp                  )
make_unit( "doc.core.regular" fsnm.cpp                 )
make_unit( "doc.core.regular" hi.cpp                   )
make_unit( "doc.core.regular" if_add.cpp               )
make_unit( "doc.core.regular" if_allbits_else.cpp      )
make_unit( "doc.core.regular" if_else_allbits.cpp      )
make_unit( "doc.core.regular" if_else.cpp              )
make_unit( "doc.core.regular" if_else_mone.cpp         )
make_unit( "doc.core.regular" if_else_one.cpp          )
make_unit( "doc.core.regular" if_else_zero.cpp         )
make_unit( "doc.core.regular" if_mone_else.cpp         )
make_unit( "doc.core.regular" if_mul.cpp               )
make_unit( "doc.core.regular" ifnot_else.cpp           )
make_unit( "doc.core.regular" if_one_else.cpp          )
make_unit( "doc.core.regular" ifrexp.cpp               )
make_unit( "doc.core.regular" if_sub.cpp               )
make_unit( "doc.core.regular" if_zero_else.cpp         )
make_unit( "doc.core.regular" inc.cpp                  )
make_unit( "doc.core.regular" int8.cpp                 )
make_unit( "doc.core.regular" int16.cpp                )
make_unit( "doc.core.regular" int32.cpp                )
make_unit( "doc.core.regular" int64.cpp                )
make_unit( "doc.core.regular" int_.cpp                 )
make_unit( "doc.core.regular" is_denormal.cpp          )
make_unit( "doc.core.regular" is_eqz.cpp               )
make_unit( "doc.core.regular" is_even.cpp              )
make_unit( "doc.core.regular" is_finite.cpp            )
make_unit( "doc.core.regular" is_flint.cpp             )
make_unit( "doc.core.regular" is_gez.cpp               )
make_unit( "doc.core.regular" is_gtz.cpp               )
make_unit( "doc.core.regular" is_imag.cpp              )
make_unit( "doc.core.regular" is_less.cpp              )
make_unit( "doc.core.regular" is_less_equal.cpp        )
make_unit( "doc.core.regular" is_lessgreater.cpp       )
make_unit( "doc.core.regular" is_lez.cpp               )
make_unit( "doc.core.regular" is_ltz.cpp               )
make_unit( "doc.core.regular" is_nan.cpp               )
make_unit( "doc.core.regular" is_negative.cpp          )
make_unit( "doc.core.regular" is_ngez.cpp              )
make_unit( "doc.core.regular" is_ngtz.cpp              )
make_unit( "doc.core.regular" is_nlez.cpp              )
make_unit( "doc.core.regular" is_nltz.cpp              )
make_unit( "doc.core.regular" is_normal.cpp            )
make_unit( "doc.core.regular" is_not_denormal.cpp      )
make_unit( "doc.core.regular" is_not_finite.cpp        )
make_unit( "doc.core.regular" is_not_flint.cpp         )
make_unit( "doc.core.regular" is_not_greater.cpp       )
make_unit( "doc.core.regular" is_not_greater_equal.cpp )
make_unit( "doc.core.regular" is_not_imag.cpp          )
make_unit( "doc.core.regular" is_not_infinite.cpp      )
make_unit( "doc.core.regular" is_not_less.cpp          )
make_unit( "doc.core.regular" is_not_less_equal.cpp    )
make_unit( "doc.core.regular" is_not_nan.cpp           )
make_unit( "doc.core.regular" is_not_real.cpp          )
make_unit( "doc.core.regular" is_odd.cpp               )
make_unit( "doc.core.regular" is_ordered.cpp           )
make_unit( "doc.core.regular" is_positive.cpp          )
make_unit( "doc.core.regular" is_pow2.cpp              )
make_unit( "doc.core.regular" is_real.cpp              )
make_unit( "doc.core.regular" is_unordered.cpp         )
make_unit( "doc.core.regular" ldexp.cpp                )
make_unit( "doc.core.regular" lerp.cpp                 )
make_unit( "doc.core.regular" lo.cpp                   )
make_unit( "doc.core.regular" logical_andnot.cpp       )
make_unit( "doc.core.regular" logical_notand.cpp       )
make_unit( "doc.core.regular" logical_notor.cpp        )
make_unit( "doc.core.regular" logical_ornot.cpp        )
make_unit( "doc.core.regular" logical_xor.cpp          )
make_unit( "doc.core.regular" lohi.cpp                 )
make_unit( "doc.core.regular" manhattan.cpp            )
make_unit( "doc.core.regular" mantissa.cpp             )
make_unit( "doc.core.regular" maxabs.cpp               )
make_unit( "doc.core.regular" max.cpp                  )
make_unit( "doc.core.regular" maximum.cpp              )
make_unit( "doc.core.regular" maxmag.cpp               )
make_unit( "doc.core.regular" minabs.cpp               )
make_unit( "doc.core.regular" min.cpp                  )
make_unit( "doc.core.regular" minimum.cpp              )
make_unit( "doc.core.regular" minmag.cpp               )
make_unit( "doc.core.regular" minus.cpp                )
make_unit( "doc.core.regular" modf.cpp                 )
make_unit( "doc.core.regular" mul.cpp                  )
make_unit( "doc.core.regular" nearest.cpp              )
make_unit( "doc.core.regular" negabsmax.cpp            )
make_unit( "doc.core.regular" negabsmin.cpp            )
make_unit( "doc.core.regular" negate.cpp               )
make_unit( "doc.core.regular" negatenz.cpp             )
make_unit( "doc.core.regular" negmaxabs.cpp            )
make_unit( "doc.core.regular" negminabs.cpp            )
make_unit( "doc.core.regular" nextafter.cpp            )
make_unit( "doc.core.regular" next.cpp                 )
make_unit( "doc.core.regular" oneminus.cpp             )
make_unit( "doc.core.regular" plus.cpp                 )
make_unit( "doc.core.regular" popcount.cpp             )
make_unit( "doc.core.regular" prev.cpp                 )
make_unit( "doc.core.regular" rat.cpp                  )
make_unit( "doc.core.regular" rec.cpp                  )
make_unit( "doc.core.regular" reduce.cpp               )
make_unit( "doc.core.regular" rem.cpp                  )
make_unit( "doc.core.regular" remdiv.cpp               )
make_unit( "doc.core.regular" replace_ignored.cpp      )
make_unit( "doc.core.regular" round.cpp                )
make_unit( "doc.core.regular" roundscale.cpp           )
make_unit( "doc.core.regular" rshl.cpp                 )
make_unit( "doc.core.regular" rshr.cpp                 )
make_unit( "doc.core.regular" rsqrt.cpp                )
make_unit( "doc.core.regular" saturate.cpp             )
make_unit( "doc.core.regular" shl.cpp                  )
make_unit( "doc.core.regular" shr.cpp                  )
make_unit( "doc.core.regular" sign.cpp                 )
make_unit( "doc.core.regular" sign_alternate.cpp       )
make_unit( "doc.core.regular" significants.cpp         )
make_unit( "doc.core.regular" signnz.cpp               )
make_unit( "doc.core.regular" sqr_abs.cpp              )
make_unit( "doc.core.regular" sqr.cpp                  )
make_unit( "doc.core.regular" sqrt.cpp                 )
make_unit( "doc.core.regular" sub.cpp                  )
make_unit( "doc.core.regular" sum_of_prod.cpp          )
make_unit( "doc.core.regular" swap_if.cpp              )
make_unit( "doc.core.regular" three_fma.cpp            )
make_unit( "doc.core.regular" trunc.cpp                )
make_unit( "doc.core.regular" two_add.cpp              )
make_unit( "doc.core.regular" two_prod.cpp             )
make_unit( "doc.core.regular" uint8.cpp                )
make_unit( "doc.core.regular" uint16.cpp               )
make_unit( "doc.core.regular" uint32.cpp               )
make_unit( "doc.core.regular" uint64.cpp               )
make_unit( "doc.core.regular" uint_.cpp                )
make_unit( "doc.core.regular" zip.cpp                  )
