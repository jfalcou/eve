##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright : EVE Contributors & Maintainers
##  SPDX-License-Identifier: MIT
##==================================================================================================
##==================================================================================================


make_unit( "doc.core" bitofsign.cpp                         )
make_unit( "doc.core" bit_and.cpp                           )
make_unit( "doc.core" bit_andnot.cpp                        )
make_unit( "doc.core" bit_cast.cpp                          )
make_unit( "doc.core" bit_mask.cpp                          )
make_unit( "doc.core" bit_not.cpp                           )
make_unit( "doc.core" bit_notand.cpp                        )
make_unit( "doc.core" bit_notor.cpp                         )
make_unit( "doc.core" bit_or.cpp                            )
make_unit( "doc.core" bit_ornot.cpp                         )
make_unit( "doc.core" bit_select.cpp                        )
make_unit( "doc.core" bitincrement.cpp                      )
###make_unit( "doc.core" bit_shl.cpp                           )
make_unit( "doc.core" bit_shr.cpp                           )
make_unit( "doc.core" bit_width.cpp                         )
make_unit( "doc.core" bit_xor.cpp                           )
make_unit( "doc.core" broadcast.cpp                         )
make_unit( "doc.core" combine.cpp                           )
make_unit( "doc.core" constant.cpp                          )
make_unit( "doc.core" convert.cpp                           )
make_unit( "doc.core" countl_one.cpp                        )
make_unit( "doc.core" countr_one.cpp                        )
make_unit( "doc.core" countl_zero.cpp                       )
make_unit( "doc.core" countr_zero.cpp                       )
make_unit( "doc.core" count_true.cpp                        )
make_unit( "doc.core" deco.cpp                              )
make_unit( "doc.core" exponentmask.cpp                      )
make_unit( "doc.core" false.cpp                             )
make_unit( "doc.core" firstbitset.cpp                       )
make_unit( "doc.core" firstbitunset.cpp                     )
make_unit( "doc.core" half.cpp                              )
make_unit( "doc.core" halfeps.cpp                           )
make_unit( "doc.core" ieee_constant.cpp                     )
make_unit( "doc.core" inf.cpp                               )
make_unit( "doc.core" invlog10_2.cpp                        )
make_unit( "doc.core" invlog_10.cpp                         )
make_unit( "doc.core" invlog_2.cpp                          )
make_unit( "doc.core" invpi.cpp                             )
make_unit( "doc.core" invsqrt_2.cpp                         )
make_unit( "doc.core" if_add.cpp                            )
make_unit( "doc.core" if_allbits_else.cpp                   )
make_unit( "doc.core" if_else.cpp                           )
make_unit( "doc.core" if_else_allbits.cpp                   )
make_unit( "doc.core" if_else_mone.cpp                      )
make_unit( "doc.core" if_else_one.cpp                       )
make_unit( "doc.core" if_else_zero.cpp                      )
make_unit( "doc.core" if_mone_else.cpp                      )
make_unit( "doc.core" if_mul.cpp                            )
make_unit( "doc.core" if_one_else.cpp                       )
make_unit( "doc.core" if_sub.cpp                            )
make_unit( "doc.core" if_zero_else.cpp                      )
make_unit( "doc.core" ifnot_else.cpp                        )
make_unit( "doc.core" is_pow2.cpp                           )
make_unit( "doc.core" limitexponent.cpp                     )
make_unit( "doc.core" log_2.cpp                             )
make_unit( "doc.core" logeps.cpp                            )
make_unit( "doc.core" mantissamask.cpp                      )
make_unit( "doc.core" mask.cpp                              )
make_unit( "doc.core" maxexponent.cpp                       )
make_unit( "doc.core" maxexponentm1.cpp                     )
make_unit( "doc.core" maxflint.cpp                          )
make_unit( "doc.core" maximum.cpp                           )
make_unit( "doc.core" maxlog.cpp                            )
make_unit( "doc.core" maxlog10.cpp                          )
make_unit( "doc.core" maxlog2.cpp                           )
make_unit( "doc.core" mhalf.cpp                             )
make_unit( "doc.core" minimum.cpp                           )
make_unit( "doc.core" mindenormal.cpp                       )
make_unit( "doc.core" minexponent.cpp                       )
make_unit( "doc.core" minf.cpp                              )
make_unit( "doc.core" minlog.cpp                            )
make_unit( "doc.core" minlog10.cpp                          )
make_unit( "doc.core" minlog10denormal.cpp                  )
make_unit( "doc.core" minlog2.cpp                           )
make_unit( "doc.core" minlog2denormal.cpp                   )
make_unit( "doc.core" minlogdenormal.cpp                    )
make_unit( "doc.core" mone.cpp                              )
make_unit( "doc.core" mzero.cpp                             )
make_unit( "doc.core" nan.cpp                               )
make_unit( "doc.core" nbmantissabits.cpp                    )
make_unit( "doc.core" none.cpp                              )
make_unit( "doc.core" one.cpp                               )
make_unit( "doc.core" oneosqrteps.cpp                       )
make_unit( "doc.core" oneotwoeps.cpp                        )
make_unit( "doc.core" pi.cpp                                )
make_unit( "doc.core" pio_2.cpp                             )
make_unit( "doc.core" pio_4.cpp                             )
make_unit( "doc.core" popcount.cpp                          )
make_unit( "doc.core" reduce.cpp                            )
make_unit( "doc.core" replace_ignored.cpp                   )
make_unit( "doc.core" signmask.cpp                          )
make_unit( "doc.core" smallestposval.cpp                    )
make_unit( "doc.core" sqrt_2.cpp                            )
make_unit( "doc.core" sqrt_2o_2.cpp                         )
make_unit( "doc.core" sqrteps.cpp                           )
make_unit( "doc.core" sqrtvalmax.cpp                        )
make_unit( "doc.core" swap_if.cpp                           )
make_unit( "doc.core" true.cpp                              )
make_unit( "doc.core" twoopi.cpp                            )
make_unit( "doc.core" twopi.cpp                             )
make_unit( "doc.core" twotonmb.cpp                          )
make_unit( "doc.core" valmax.cpp                            )
make_unit( "doc.core" valmin.cpp                            )
make_unit( "doc.core" zero.cpp                              )
make_unit( "doc.core" zip.cpp                               )
