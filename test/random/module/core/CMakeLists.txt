##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright : EVE Project Contributors
##  SPDX-License-Identifier: BSL-1.0
##==================================================================================================
add_custom_target(random.core.exe           )
add_dependencies(random.exe random.core.exe )

##==================================================================================================
## tests
##==================================================================================================
make_unit("random.core" abs.cpp                 )
make_unit("random.core" arg.cpp                 )
make_unit("random.core" average.cpp             )
make_unit("random.core" bit_ceil.cpp            )
make_unit("random.core" bit_floor.cpp           )
make_unit("random.core" bit_mask.cpp            )
make_unit("random.core" bit_not.cpp             )
make_unit("random.core" bit_width.cpp           )
make_unit("random.core" bitofsign.cpp           )
make_unit("random.core" ceil.cpp                )
make_unit("random.core" dec.cpp                 )
make_unit("random.core" exponent.cpp            )
make_unit("random.core" firstbitset.cpp         )
make_unit("random.core" firstbitunset.cpp       )
make_unit("random.core" floor.cpp               )
make_unit("random.core" frac.cpp                )
##make_unit("random.core" frexp.cpp               )
##make_unit("random.core" ifrexp.cpp              )
make_unit("random.core" inc.cpp                 )
make_unit("random.core" is_denormal.cpp         )
make_unit("random.core" is_eqz.cpp              )
make_unit("random.core" is_even.cpp             )
make_unit("random.core" is_gez.cpp              )
make_unit("random.core" is_gtz.cpp              )
make_unit("random.core" is_imag.cpp             )
make_unit("random.core" is_infinite.cpp         )
make_unit("random.core" is_lez.cpp              )
make_unit("random.core" is_ltz.cpp              )
make_unit("random.core" is_nan.cpp              )
make_unit("random.core" is_nez.cpp              )
make_unit("random.core" is_ngez.cpp             )
make_unit("random.core" is_ngtz.cpp             )
make_unit("random.core" is_nlez.cpp             )
make_unit("random.core" is_nltz.cpp             )
make_unit("random.core" is_normal.cpp           )
make_unit("random.core" is_not_denormal.cpp     )
make_unit("random.core" is_not_finite.cpp       )
make_unit("random.core" is_not_imag.cpp         )
make_unit("random.core" is_not_infinite.cpp     )
make_unit("random.core" is_not_nan.cpp          )
make_unit("random.core" is_not_real.cpp         )
make_unit("random.core" is_negative.cpp         )
make_unit("random.core" is_odd.cpp              )
make_unit("random.core" is_positive.cpp         )
make_unit("random.core" is_pow2.cpp             )
make_unit("random.core" is_real.cpp             )
make_unit("random.core" logical_not.cpp         )
make_unit("random.core" mantissa.cpp            )
make_unit("random.core" minus.cpp               )
make_unit("random.core" nearest.cpp             )
make_unit("random.core" next.cpp                )
make_unit("random.core" oneminus.cpp            )
make_unit("random.core" plus.cpp                )
make_unit("random.core" prev.cpp                )
make_unit("random.core" popcount.cpp            )
make_unit("random.core" round.cpp               )
make_unit("random.core" sign.cpp                )
make_unit("random.core" signnz.cpp              )
make_unit("random.core" sqr.cpp                 )
make_unit("random.core" sqr_abs.cpp             )
make_unit("random.core" trunc.cpp               )
