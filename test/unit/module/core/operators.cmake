##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright 2020 Joel FALCOU
##  Copyright 2020 Jean-Thierry Lapreste
##
##  Licensed under the MIT License <http://opensource.org/licenses/MIT>.
##  SPDX-License-Identifier: MIT
##==================================================================================================

##==================================================================================================
## Operators function unit tests
##==================================================================================================
make_all_units(ROOT core NAME add   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME dec   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME div   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME inc   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME minus ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME mul   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME plus  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME rem   ARCH scalar simd TYPES ${signed_types}  )
make_all_units(ROOT core NAME rshl  ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT core NAME rshr  ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT core NAME shl   ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT core NAME shr   ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT core NAME sub   ARCH scalar simd TYPES ${all_types}     )

##==================================================================================================
## Operators meta-target
##==================================================================================================
add_custom_target(core.operators.unit)
add_custom_target(core.operators.simd.unit)
add_custom_target(core.operators.scalar.unit)

add_dependencies(core.operators.unit core.operators.simd.unit  )
add_dependencies(core.operators.unit core.operators.scalar.unit)

add_dependencies(core.operators.scalar.unit core.add.regular.scalar.unit )
add_dependencies(core.operators.scalar.unit core.add.regular_if.scalar.unit )
add_dependencies(core.operators.scalar.unit core.add.saturated.scalar.unit )
add_dependencies(core.operators.scalar.unit core.add.saturated_if.scalar.unit )
add_dependencies(core.operators.scalar.unit core.dec.regular.scalar.unit )
add_dependencies(core.operators.scalar.unit core.dec.regular_if.scalar.unit )
add_dependencies(core.operators.scalar.unit core.dec.saturated.scalar.unit )
add_dependencies(core.operators.scalar.unit core.dec.saturated_if.scalar.unit )
add_dependencies(core.operators.scalar.unit core.div.downward.scalar.unit )
add_dependencies(core.operators.scalar.unit core.div.regular.scalar.unit )
add_dependencies(core.operators.scalar.unit core.div.regular_if.scalar.unit )
add_dependencies(core.operators.scalar.unit core.div.saturated.scalar.unit )
add_dependencies(core.operators.scalar.unit core.div.saturated_if.scalar.unit )
add_dependencies(core.operators.scalar.unit core.div.to_nearest.scalar.unit )
add_dependencies(core.operators.scalar.unit core.div.toward_zero.scalar.unit )
add_dependencies(core.operators.scalar.unit core.div.upward.scalar.unit )
add_dependencies(core.operators.scalar.unit core.inc.regular.scalar.unit )
add_dependencies(core.operators.scalar.unit core.inc.regular_if.scalar.unit )
add_dependencies(core.operators.scalar.unit core.inc.saturated.scalar.unit )
add_dependencies(core.operators.scalar.unit core.inc.saturated_if.scalar.unit )
add_dependencies(core.operators.scalar.unit core.minus.regular.scalar.unit )
add_dependencies(core.operators.scalar.unit core.minus.regular_if.scalar.unit )
add_dependencies(core.operators.scalar.unit core.mul.regular.scalar.unit )
add_dependencies(core.operators.scalar.unit core.mul.regular_if.scalar.unit )
add_dependencies(core.operators.scalar.unit core.mul.saturated.scalar.unit )
add_dependencies(core.operators.scalar.unit core.mul.saturated_if.scalar.unit )
add_dependencies(core.operators.scalar.unit core.plus.regular.scalar.unit )
add_dependencies(core.operators.scalar.unit core.rem.downward.scalar.unit )
add_dependencies(core.operators.scalar.unit core.rem.regular.scalar.unit )
add_dependencies(core.operators.scalar.unit core.rem.to_nearest.scalar.unit )
add_dependencies(core.operators.scalar.unit core.rem.toward_zero.scalar.unit )
add_dependencies(core.operators.scalar.unit core.rem.upward.scalar.unit )
add_dependencies(core.operators.scalar.unit core.rshl.regular.scalar.unit )
add_dependencies(core.operators.scalar.unit core.rshr.regular.scalar.unit )
add_dependencies(core.operators.scalar.unit core.shl.regular.scalar.unit )
add_dependencies(core.operators.scalar.unit core.shr.regular.scalar.unit )
add_dependencies(core.operators.scalar.unit core.sub.regular.scalar.unit )
add_dependencies(core.operators.scalar.unit core.sub.regular_if.scalar.unit )
add_dependencies(core.operators.scalar.unit core.sub.saturated.scalar.unit )
add_dependencies(core.operators.scalar.unit core.sub.saturated_if.scalar.unit )

add_dependencies(core.operators.simd.unit core.add.regular.simd.unit )
add_dependencies(core.operators.simd.unit core.add.regular_if.simd.unit )
add_dependencies(core.operators.simd.unit core.add.saturated.simd.unit )
add_dependencies(core.operators.simd.unit core.add.saturated_if.simd.unit )
add_dependencies(core.operators.simd.unit core.dec.regular.simd.unit )
add_dependencies(core.operators.simd.unit core.dec.regular_if.simd.unit )
add_dependencies(core.operators.simd.unit core.dec.saturated.simd.unit )
add_dependencies(core.operators.simd.unit core.dec.saturated_if.simd.unit )
add_dependencies(core.operators.simd.unit core.div.downward.simd.unit )
add_dependencies(core.operators.simd.unit core.div.regular.simd.unit )
add_dependencies(core.operators.simd.unit core.div.regular_if.simd.unit )
add_dependencies(core.operators.simd.unit core.div.saturated.simd.unit )
add_dependencies(core.operators.simd.unit core.div.saturated_if.simd.unit )
add_dependencies(core.operators.simd.unit core.div.to_nearest.simd.unit )
add_dependencies(core.operators.simd.unit core.div.toward_zero.simd.unit )
add_dependencies(core.operators.simd.unit core.div.upward.simd.unit )
add_dependencies(core.operators.simd.unit core.inc.regular.simd.unit )
add_dependencies(core.operators.simd.unit core.inc.regular_if.simd.unit )
add_dependencies(core.operators.simd.unit core.inc.saturated.simd.unit )
add_dependencies(core.operators.simd.unit core.inc.saturated_if.simd.unit )
add_dependencies(core.operators.simd.unit core.minus.regular.simd.unit )
add_dependencies(core.operators.simd.unit core.minus.regular_if.simd.unit )
add_dependencies(core.operators.simd.unit core.mul.regular.simd.unit )
add_dependencies(core.operators.simd.unit core.mul.regular_if.simd.unit )
add_dependencies(core.operators.simd.unit core.mul.saturated.simd.unit )
add_dependencies(core.operators.simd.unit core.mul.saturated_if.simd.unit )
add_dependencies(core.operators.simd.unit core.plus.regular.simd.unit )
add_dependencies(core.operators.simd.unit core.rem.downward.simd.unit )
add_dependencies(core.operators.simd.unit core.rem.regular.simd.unit )
add_dependencies(core.operators.simd.unit core.rem.to_nearest.simd.unit )
add_dependencies(core.operators.simd.unit core.rem.toward_zero.simd.unit )
add_dependencies(core.operators.simd.unit core.rem.upward.simd.unit )
add_dependencies(core.operators.simd.unit core.rshl.regular.simd.unit )
add_dependencies(core.operators.simd.unit core.rshr.regular.simd.unit )
add_dependencies(core.operators.simd.unit core.shl.regular.simd.unit )
add_dependencies(core.operators.simd.unit core.shr.regular.simd.unit )
add_dependencies(core.operators.simd.unit core.sub.regular.simd.unit )
add_dependencies(core.operators.simd.unit core.sub.regular_if.simd.unit )
add_dependencies(core.operators.simd.unit core.sub.saturated.simd.unit )
add_dependencies(core.operators.simd.unit core.sub.saturated_if.simd.unit )
