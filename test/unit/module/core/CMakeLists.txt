##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright : EVE Contributors & Maintainers
##  SPDX-License-Identifier: MIT
##==================================================================================================

add_custom_target(unit.core.exe                )
add_dependencies(unit.exe unit.core.exe        )


##==================================================================================================
## new style tests
##==================================================================================================
make_unit("unit.core" all.cpp                   )
make_unit("unit.core" any.cpp                   )
make_unit("unit.core" as_value.cpp              )
make_unit("unit.core" bit_and.cpp               )
make_unit("unit.core" bit_andnot.cpp            )
make_unit("unit.core" bit_cast.cpp              )
make_unit("unit.core" bit_mask.cpp              )
make_unit("unit.core" bit_notand.cpp            )
make_unit("unit.core" bit_not.cpp               )
make_unit("unit.core" bit_notor.cpp             )
make_unit("unit.core" bitofsign.cpp             )
make_unit("unit.core" bit_or.cpp                )
make_unit("unit.core" bit_ornot.cpp             )
make_unit("unit.core" bit_select.cpp            )
make_unit("unit.core" bit_shl.cpp               )
make_unit("unit.core" bit_shr.cpp               )
make_unit("unit.core" bit_width.cpp             )
make_unit("unit.core" bit_xor.cpp               )
make_unit("unit.core" constant.cpp              )
make_unit("unit.core" constants.cpp             )
make_unit("unit.core" countl_one.cpp            )
make_unit("unit.core" countl_zero.cpp           )
make_unit("unit.core" countr_one.cpp            )
make_unit("unit.core" countr_zero.cpp           )
make_unit("unit.core" count_true.cpp            )
make_unit("unit.core" dec.cpp                   )
make_unit("unit.core" decorated.div.cpp         )
make_unit("unit.core" decorated.rem.cpp         )
make_unit("unit.core" firstbitset.cpp           )
make_unit("unit.core" firstbitunset.cpp         )
make_unit("unit.core" first_true.cpp            )
make_unit("unit.core" gather.cpp                )
make_unit("unit.core" has_single_bit.cpp        )
make_unit("unit.core" if_else.cpp               )
make_unit("unit.core" is_pow2.cpp               )
make_unit("unit.core" lookup.cpp                )
make_unit("unit.core" maximum.cpp               )
make_unit("unit.core" minimum.cpp               )
make_unit("unit.core" none.cpp                  )
make_unit("unit.core" popcount.cpp              )
make_unit("unit.core" reduce.cpp                )
make_unit("unit.core" scan.cpp                  )

make_unit("unit.core"  convert/to_double.cpp    )
make_unit("unit.core"  convert/to_float.cpp     )
make_unit("unit.core"  convert/to_int64.cpp     )
make_unit("unit.core"  convert/to_int32.cpp     )
make_unit("unit.core"  convert/to_int16.cpp     )
make_unit("unit.core"  convert/to_int8.cpp      )
make_unit("unit.core"  convert/to_uint64.cpp    )
make_unit("unit.core"  convert/to_uint32.cpp    )
make_unit("unit.core"  convert/to_uint16.cpp    )
make_unit("unit.core"  convert/to_uint8.cpp     )
make_unit("unit.core"  convert/to_tuple.cpp     )

make_unit("unit.core"  saturate/as_double.cpp   )
make_unit("unit.core"  saturate/as_float.cpp    )
make_unit("unit.core"  saturate/as_int64.cpp    )
make_unit("unit.core"  saturate/as_int32.cpp    )
make_unit("unit.core"  saturate/as_int16.cpp    )
make_unit("unit.core"  saturate/as_int8.cpp     )
make_unit("unit.core"  saturate/as_uint64.cpp   )
make_unit("unit.core"  saturate/as_uint32.cpp   )
make_unit("unit.core"  saturate/as_uint16.cpp   )
make_unit("unit.core"  saturate/as_uint8.cpp    )
