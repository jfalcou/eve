##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright 2019 Joel FALCOU
##  Copyright 2019 Jean-Thierry Lapreste
##
##  Licensed under the MIT License <http://opensource.org/licenses/MIT>.
##  SPDX-License-Identifier: MIT
##==================================================================================================

##==================================================================================================
## Elementwise function unit tests
##==================================================================================================
make_all_units(ROOT core NAME abs     ARCH scalar simd TYPES ${all_types} )
make_all_units(ROOT core NAME acos    ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME acosd   ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME acospi  ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME acot    ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME acotd   ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME acotpi  ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME acsc    ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME acscd   ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME acscpi  ARCH scalar simd TYPES ${real_types})
make_all_units(ROOT core NAME add     ARCH scalar simd TYPES ${all_types} )
make_all_units(ROOT core NAME all     ARCH scalar simd TYPES ${all_types} )
make_all_units(ROOT core NAME arg     ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME asec    ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME asecd   ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME asecpi  ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME asin    ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME asind   ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME asinpi  ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME atan    ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME atand   ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME atanpi  ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME atan2   ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME atan2d  ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME atan2pi ARCH scalar simd TYPES ${real_types})
make_all_units(ROOT core NAME average ARCH scalar simd TYPES ${all_types} )

make_all_units(ROOT core NAME binarize    ARCH scalar simd TYPES ${all_types} )
make_all_units(ROOT core NAME binarize_c  ARCH scalar simd TYPES ${all_types} )
make_all_units(ROOT core NAME bitofsign   ARCH scalar simd TYPES ${all_types} )
# make_units("bitwise_and/regular"            "core" ${all_types})
# make_units("bitwise_andnot/regular"         "core" ${all_types})
# make_units("bitwise_mask/regular"           "core" ${all_types})
# make_units("bitwise_not/regular"            "core" ${all_types})
# make_units("bitwise_notand/regular"         "core" ${all_types})
# make_units("bitwise_notor/regular"          "core" ${all_types})
# make_units("bitwise_or/regular"             "core" ${all_types})
# make_units("bitwise_ornot/regular"          "core" ${all_types})
# make_units("bitwise_select/regular"         "core" ${all_types})
# make_units("bitwise_shl/regular"            "core" ${integral_types})
# make_units("bitwise_shr/regular"            "core" ${integral_types})
# make_units("bitwise_xor/regular"            "core" ${all_types})

make_all_units(ROOT core NAME ceil   ARCH scalar simd TYPES ${all_types} )
# make_units("clamp/regular"                  "core" ${all_types})
# make_units("conj/regular"                   "core" ${real_types})
# make_units("copysign/regular"               "core" ${all_types})

# make_units("dec/regular"                    "core" ${all_types})
# make_units("dec/saturated"                  "core" ${all_types})
# make_units("dist/regular"                   "core" ${all_types})
# make_units("dist/saturated"                 "core" ${all_types})
# make_units("div/regular"                    "core" ${all_types})
# make_units("div/saturated"                  "core" ${all_types})
# make_units("div/regular_if"                 "core" ${all_types})
# make_units("div/saturated_if"               "core" ${all_types})

# make_units("extract/regular"                "core" ${all_types})

# make_units("floor/regular"                  "core" ${all_types})
# make_units("fma/regular"                    "core" ${all_types})
# ##make_units("fma/pedantic"                   "core" ${all_types})
# make_units("fms/regular"                    "core" ${all_types})
# ##make_units("fms/pedantic"                   "core" ${all_types})
# make_units("fnma/regular"                   "core" ${all_types})
# ##make_units("fnma/pedantic"                   "core" ${all_types})
# make_units("fnms/regular"                   "core" ${all_types})
# ##make_units("fnms/pedantic"                   "core" ${all_types})
# make_units("frac/regular"                   "core" ${all_types})

# make_units("horn/regular"                   "core" ${real_types})
# make_units("horn1/regular"                  "core" ${real_types})
# make_units("hypot/regular"                  "core" ${real_types})
# ##make_units("hypot/pedantic"                  "core" ${real_types})

# make_units("if_else/regular"                "core" ${all_types})
# make_units("if_else/allbits"                "core" ${all_types})
# make_units("if_else/mone"                   "core" ${all_types})
# make_units("if_else/one"                    "core" ${all_types})
# make_units("if_else/zero"                   "core" ${all_types})
# make_units("inc/regular"                    "core" ${all_types})
# make_units("inc/regular_if"                 "core" ${all_types})
# make_units("inc/saturated"                  "core" ${all_types})
# make_units("inc/saturated_if"               "core" ${all_types})
# make_units("indeg/regular"                  "core" ${real_types})
# make_units("inpi/regular"                   "core" ${real_types})
# make_units("is_denormal/regular"            "core" ${all_types})
# make_units("is_equal/regular"               "core" ${all_types})
# make_units("is_equal/numeric"               "core" ${all_types})
# make_units("is_eqz/regular"                 "core" ${all_types})
# make_units("is_even/regular"                "core" ${all_types})
# make_units("is_finite/regular"              "core" ${all_types})
# make_units("is_flint/regular"               "core" ${all_types})
# make_units("is_gez/regular"                 "core" ${all_types})
# make_units("is_greater/regular"             "core" ${all_types})
# make_units("is_greater_equal/regular"       "core" ${all_types})
# make_units("is_gtz/regular"                 "core" ${all_types})
# make_units("is_imag/regular"                "core" ${real_types})
# make_units("is_infinite/regular"            "core" ${all_types})
# make_units("is_less/regular"                "core" ${all_types})
# make_units("is_less_equal/regular"          "core" ${all_types})
# make_units("is_lessgreater/regular"         "core" ${all_types})
# make_units("is_lez/regular"                 "core" ${all_types})
# make_units("is_ltz/regular"                 "core" ${all_types})
# make_units("is_nan/regular"                 "core" ${all_types})
# make_units("is_nez/regular"                 "core" ${all_types})
# make_units("is_ngez/regular"                "core" ${all_types})
# make_units("is_ngtz/regular"                "core" ${all_types})
# make_units("is_nlez/regular"                "core" ${all_types})
# make_units("is_nltz/regular"                "core" ${all_types})
# make_units("is_normal/regular"              "core" ${all_types})
# make_units("is_not_denormal/regular"        "core" ${all_types})
# make_units("is_not_equal/regular"           "core" ${all_types})
# make_units("is_not_equal/numeric"           "core" ${all_types})
# make_units("is_not_finite/regular"          "core" ${all_types})
# make_units("is_not_greater/regular"         "core" ${all_types})
# make_units("is_not_greater_equal/regular"   "core" ${all_types})
# make_units("is_not_imag/regular"            "core" ${real_types})
# make_units("is_not_inf/regular"             "core" ${all_types})
# make_units("is_not_less/regular"            "core" ${all_types})
# make_units("is_not_less_equal/regular"      "core" ${all_types})
# make_units("is_not_nan/regular"             "core" ${all_types})
# make_units("is_not_real/regular"            "core" ${real_types})
# make_units("is_odd/regular"                 "core" ${all_types})
# make_units("is_ordered/regular"             "core" ${all_types})
# make_units("is_positive/regular"            "core" ${all_types})
# make_units("is_real/regular"                "core" ${real_types})
# make_units("is_unordered/regular"           "core" ${all_types})

# make_units("logical_and/regular"            "core" ${all_types})
# make_units("logical_andnot/regular"         "core" ${all_types})
# make_units("logical_not/regular"            "core" ${all_types})
# make_units("logical_notand/regular"         "core" ${all_types})
# make_units("logical_notor/regular"          "core" ${all_types})
# make_units("logical_or/regular"             "core" ${all_types})
# make_units("logical_ornot/regular"          "core" ${all_types})
# make_units("logical_xor/regular"            "core" ${all_types})
# make_units("max/numeric"                    "core" ${all_types})

# make_units("max/regular"                    "core" ${all_types})
# make_units("max/pedantic"                   "core" ${all_types})
# make_units("maxmag/numeric"                 "core" ${all_types})
# make_units("maxmag/regular"                 "core" ${all_types})
# make_units("maxmag/pedantic"                "core" ${all_types})
# make_units("min/numeric"                    "core" ${all_types})
# make_units("min/regular"                    "core" ${all_types})
# make_units("min/pedantic"                   "core" ${all_types})
# make_units("minmag/numeric"                 "core" ${all_types})
# make_units("minmag/regular"                 "core" ${all_types})
# make_units("minmag/pedantic"                "core" ${all_types})
# make_units("mul/regular"                    "core" ${all_types})
# make_units("mul/saturated"                  "core" ${all_types})
# make_units("mul/regular_if"                 "core" ${all_types})
# make_units("mul/saturated_if"               "core" ${all_types})

# make_units("nearest/regular"                "core" ${all_types})

# make_units("oneminus/regular"               "core" ${all_types})
# make_units("oneminus/saturated"             "core" ${all_types})

# make_units("popcnt/regular"                 "core" ${integral_types})

# make_units("rec/regular"                    "core" ${all_types})
# make_units("rec/raw"                        "core" ${all_types})
# make_units("round/regular"                  "core" ${all_types})
# make_units("rshl/regular"                   "core" ${integral_types})
# make_units("rshr/regular"                   "core" ${integral_types})
# make_units("rsqrt/regular"                  "core" ${real_types})
# make_units("trunc/regular"                  "core" ${all_types})

# make_units("saturate/regular"               "core" ${all_types})
# make_units("shl/regular"                    "core" ${integral_types})
# make_units("shr/regular"                    "core" ${integral_types})
# make_units("sign/regular"                   "core" ${all_types})
# make_units("signnz/regular"                 "core" ${all_types})
# make_units("sqr/regular"                    "core" ${all_types})
# make_units("sqr/saturated"                  "core" ${all_types})
# make_units("sqr_abs/regular"                "core" ${real_types})
# make_units("sqrt/regular"                   "core" ${real_types})
# make_units("sqrt/raw"                       "core" ${real_types})
# make_units("sub/regular"                    "core" ${all_types})
# make_units("sub/saturated"                  "core" ${all_types})
# make_units("sub/regular_if"                 "core" ${all_types})
# make_units("sub/saturated_if"               "core" ${all_types})

# make_units("unary_plus/regular"             "core" ${all_types})
# make_units("unary_minus/regular"            "core" ${all_types})
# ##st_tests("unary_minus/regular_if"         "core" ${all_types})

# make_unit( "core" scalar/inf.cpp )
# make_unit( "core" scalar/minf.cpp )
# make_unit( "core" scalar/nan.cpp )
# make_unit( "core" scalar/mzero.cpp )
# make_unit( "core" scalar/signmask.cpp )

##==================================================================================================
## Specialty function unit tests
# make_units("bitwise_cast/regular"           "core" ${all_types})
# make_unit( "core" simd/bitwise_cast.cpp )

##==================================================================================================
## Expected failures tests
check_failure( "core" failure/conditionnal/is_equal.cpp )
check_failure( "core" failure/conditionnal/is_not_equal.cpp )
check_failure( "core" failure/acos.cpp )
check_failure( "core" failure/asin.cpp )
check_failure( "core" failure/acot.cpp )
check_failure( "core" failure/asec.cpp )
check_failure( "core" failure/acsc.cpp )
check_failure( "core" failure/atan.cpp )
check_failure( "core" failure/atan2.cpp )
check_failure( "core" failure/atan2d.cpp )
check_failure( "core" failure/atan2pi.cpp )
check_failure( "core" failure/acosd.cpp )
check_failure( "core" failure/asind.cpp )
check_failure( "core" failure/acotd.cpp )
check_failure( "core" failure/asecd.cpp )
check_failure( "core" failure/acscd.cpp )
check_failure( "core" failure/atand.cpp )
check_failure( "core" failure/acospi.cpp )
check_failure( "core" failure/asinpi.cpp )
check_failure( "core" failure/acotpi.cpp )
check_failure( "core" failure/asecpi.cpp )
check_failure( "core" failure/acscpi.cpp )
check_failure( "core" failure/atanpi.cpp )
check_failure( "core" failure/bitwise_cast.cpp )
check_failure( "core" failure/bitwise_and.cpp )
check_failure( "core" failure/indeg.cpp )
check_failure( "core" failure/inpi.cpp )
check_failure( "core" failure/sqr_abs.cpp )
check_failure( "core" failure/arg.cpp )
