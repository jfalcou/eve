##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright 2019 Joel FALCOU
##  Copyright 2019 Jean-Thierry Lapreste
##
##  Licensed under the MIT License <http://opensource.org/licenses/MIT>.
##  SPDX-License-Identifier: MIT
##==================================================================================================

##==================================================================================================
## Elementwise function unit tests
##==================================================================================================
make_all_units(ROOT core NAME abs     ARCH scalar simd TYPES ${all_types} )
# make_all_units(ROOT core NAME acos    ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME acosd   ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME acospi  ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME acot    ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME acotd   ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME acotpi  ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME acsc    ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME acscd   ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME acscpi  ARCH scalar simd TYPES ${real_types})
make_all_units(ROOT core NAME add     ARCH scalar simd TYPES ${all_types} )
make_all_units(ROOT core NAME all     ARCH scalar simd TYPES ${all_types} )
make_all_units(ROOT core NAME arg     ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME asec    ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME asecd   ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME asecpi  ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME asin    ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME asind   ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME asinpi  ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME atan    ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME atand   ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME atanpi  ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME atan2   ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME atan2d  ARCH scalar simd TYPES ${real_types})
# make_all_units(ROOT core NAME atan2pi ARCH scalar simd TYPES ${real_types})
make_all_units(ROOT core NAME average ARCH scalar simd TYPES ${all_types} )

make_all_units(ROOT core NAME binarize    ARCH scalar simd TYPES ${all_types} )
make_all_units(ROOT core NAME binarize_c  ARCH scalar simd TYPES ${all_types} )
make_all_units(ROOT core NAME bitofsign   ARCH scalar simd TYPES ${all_types} )
# make_units("bitofsign/regular"              "core" ${all_types})
# make_units("bitwise_and/regular"            "core" ${all_types})
# make_units("bitwise_andnot/regular"         "core" ${all_types})
# make_units("bitwise_mask/regular"           "core" ${all_types})
# make_units("bitwise_not/regular"            "core" ${all_types})
# make_units("bitwise_notand/regular"         "core" ${all_types})
# make_units("bitwise_notor/regular"          "core" ${all_types})
# make_units("bitwise_or/regular"             "core" ${all_types})
# make_units("bitwise_ornot/regular"          "core" ${all_types})
# make_units("bitwise_select/regular"         "core" ${all_types})
# make_units("bitwise_shl/regular"            "core" ${integral_types})
# make_units("bitwise_shr/regular"            "core" ${integral_types})
# make_units("bitwise_xor/regular"            "core" ${all_types})

# make_units("ceil/regular"                   "core" ${all_types})
# make_units("clamp/regular"                  "core" ${all_types})
# make_units("conj/regular"                   "core" ${real_types})
# make_units("copysign/regular"               "core" ${all_types})

# make_units("dec/regular"                    "core" ${all_types})
# make_units("dec/saturated"                  "core" ${all_types})
# make_units("dist/regular"                   "core" ${all_types})
# make_units("dist/saturated"                 "core" ${all_types})
# make_units("div/regular"                    "core" ${all_types})
# make_units("div/saturated"                  "core" ${all_types})
# make_units("div/regular_if"                 "core" ${all_types})
# make_units("div/saturated_if"               "core" ${all_types})

# make_units("extract/regular"                "core" ${all_types})

# make_units("floor/regular"                  "core" ${all_types})
# make_units("fma/regular"                    "core" ${all_types})
# ##make_units("fma/pedantic"                   "core" ${all_types})
# make_units("fms/regular"                    "core" ${all_types})
# ##make_units("fms/pedantic"                   "core" ${all_types})
# make_units("fnma/regular"                   "core" ${all_types})
# ##make_units("fnma/pedantic"                   "core" ${all_types})
# make_units("fnms/regular"                   "core" ${all_types})
# ##make_units("fnms/pedantic"                   "core" ${all_types})
# make_units("frac/regular"                   "core" ${all_types})

# make_units("horn/regular"                   "core" ${real_types})
# make_units("horn1/regular"                  "core" ${real_types})
# make_units("hypot/regular"                  "core" ${real_types})
# ##make_units("hypot/pedantic"                  "core" ${real_types})

# make_units("if_else/regular"                "core" ${all_types})
# make_units("if_else/allbits"                "core" ${all_types})
# make_units("if_else/mone"                   "core" ${all_types})
# make_units("if_else/one"                    "core" ${all_types})
# make_units("if_else/zero"                   "core" ${all_types})
# make_units("inc/regular"                    "core" ${all_types})
# make_units("inc/regular_if"                 "core" ${all_types})
# make_units("inc/saturated"                  "core" ${all_types})
# make_units("inc/saturated_if"               "core" ${all_types})
# make_units("indeg/regular"                  "core" ${real_types})
# make_units("inpi/regular"                   "core" ${real_types})
# make_units("is_denormal/regular"            "core" ${all_types})
# make_units("is_equal/regular"               "core" ${all_types})
# make_units("is_equal/numeric"               "core" ${all_types})
# make_units("is_eqz/regular"                 "core" ${all_types})
# make_units("is_even/regular"                "core" ${all_types})
# make_units("is_finite/regular"              "core" ${all_types})
# make_units("is_flint/regular"               "core" ${all_types})
# make_units("is_gez/regular"                 "core" ${all_types})
# make_units("is_greater/regular"             "core" ${all_types})
# make_units("is_greater_equal/regular"       "core" ${all_types})
# make_units("is_gtz/regular"                 "core" ${all_types})
# make_units("is_imag/regular"                "core" ${real_types})
# make_units("is_infinite/regular"            "core" ${all_types})
# make_units("is_less/regular"                "core" ${all_types})
# make_units("is_less_equal/regular"          "core" ${all_types})
# make_units("is_lessgreater/regular"         "core" ${all_types})
# make_units("is_lez/regular"                 "core" ${all_types})
# make_units("is_ltz/regular"                 "core" ${all_types})
# make_units("is_nan/regular"                 "core" ${all_types})
# make_units("is_nez/regular"                 "core" ${all_types})
# make_units("is_ngez/regular"                "core" ${all_types})
# make_units("is_ngtz/regular"                "core" ${all_types})
# make_units("is_nlez/regular"                "core" ${all_types})
# make_units("is_nltz/regular"                "core" ${all_types})
# make_units("is_normal/regular"              "core" ${all_types})
# make_units("is_not_denormal/regular"        "core" ${all_types})
# make_units("is_not_equal/regular"           "core" ${all_types})
# make_units("is_not_equal/numeric"           "core" ${all_types})
# make_units("is_not_finite/regular"          "core" ${all_types})
# make_units("is_not_greater/regular"         "core" ${all_types})
# make_units("is_not_greater_equal/regular"   "core" ${all_types})
# make_units("is_not_imag/regular"            "core" ${real_types})
# make_units("is_not_inf/regular"             "core" ${all_types})
# make_units("is_not_less/regular"            "core" ${all_types})
# make_units("is_not_less_equal/regular"      "core" ${all_types})
# make_units("is_not_nan/regular"             "core" ${all_types})
# make_units("is_not_real/regular"            "core" ${real_types})
# make_units("is_odd/regular"                 "core" ${all_types})
# make_units("is_ordered/regular"             "core" ${all_types})
# make_units("is_positive/regular"            "core" ${all_types})
# make_units("is_real/regular"                "core" ${real_types})
# make_units("is_unordered/regular"           "core" ${all_types})

# make_units("logical_and/regular"            "core" ${all_types})
# make_units("logical_andnot/regular"         "core" ${all_types})
# make_units("logical_not/regular"            "core" ${all_types})
# make_units("logical_notand/regular"         "core" ${all_types})
# make_units("logical_notor/regular"          "core" ${all_types})
# make_units("logical_or/regular"             "core" ${all_types})
# make_units("logical_ornot/regular"          "core" ${all_types})
# make_units("logical_xor/regular"            "core" ${all_types})
# make_units("max/numeric"                    "core" ${all_types})

# make_units("max/regular"                    "core" ${all_types})
# make_units("max/pedantic"                   "core" ${all_types})
# make_units("maxmag/numeric"                 "core" ${all_types})
# make_units("maxmag/regular"                 "core" ${all_types})
# make_units("maxmag/pedantic"                "core" ${all_types})
# make_units("min/numeric"                    "core" ${all_types})
# make_units("min/regular"                    "core" ${all_types})
# make_units("min/pedantic"                   "core" ${all_types})
# make_units("minmag/numeric"                 "core" ${all_types})
# make_units("minmag/regular"                 "core" ${all_types})
# make_units("minmag/pedantic"                "core" ${all_types})
# make_units("mul/regular"                    "core" ${all_types})
# make_units("mul/saturated"                  "core" ${all_types})
# make_units("mul/regular_if"                 "core" ${all_types})
# make_units("mul/saturated_if"               "core" ${all_types})

# make_units("nearest/regular"                "core" ${all_types})

# make_units("oneminus/regular"               "core" ${all_types})
# make_units("oneminus/saturated"             "core" ${all_types})

# make_units("popcnt/regular"                 "core" ${integral_types})

# make_units("rec/regular"                    "core" ${all_types})
# make_units("rec/raw"                        "core" ${all_types})
# make_units("round/regular"                  "core" ${all_types})
# make_units("rshl/regular"                   "core" ${integral_types})
# make_units("rshr/regular"                   "core" ${integral_types})
# make_units("rsqrt/regular"                  "core" ${real_types})
# make_units("trunc/regular"                  "core" ${all_types})

# make_units("saturate/regular"               "core" ${all_types})
# make_units("shl/regular"                    "core" ${integral_types})
# make_units("shr/regular"                    "core" ${integral_types})
# make_units("sign/regular"                   "core" ${all_types})
# make_units("signnz/regular"                 "core" ${all_types})
# make_units("sqr/regular"                    "core" ${all_types})
# make_units("sqr/saturated"                  "core" ${all_types})
# make_units("sqr_abs/regular"                "core" ${real_types})
# make_units("sqrt/regular"                   "core" ${real_types})
# make_units("sqrt/raw"                       "core" ${real_types})
# make_units("sub/regular"                    "core" ${all_types})
# make_units("sub/saturated"                  "core" ${all_types})
# make_units("sub/regular_if"                 "core" ${all_types})
# make_units("sub/saturated_if"               "core" ${all_types})

# make_units("unary_plus/regular"             "core" ${all_types})
# make_units("unary_minus/regular"            "core" ${all_types})
# ##st_tests("unary_minus/regular_if"         "core" ${all_types})

# make_unit( "core" scalar/inf.cpp )
# make_unit( "core" scalar/minf.cpp )
# make_unit( "core" scalar/nan.cpp )
# make_unit( "core" scalar/mzero.cpp )
# make_unit( "core" scalar/signmask.cpp )

##==================================================================================================
## Specialty function unit tests
# make_units("bitwise_cast/regular"           "core" ${all_types})
# make_unit( "core" simd/bitwise_cast.cpp )

# ##==================================================================================================
# ## SIMD tests
# ## make_units("simd/if_else_mone/arithmetic" "core" ${all_types})
# ## make_units("simd/if_else_mone/logical" "core" ${all_types})
# ## make_units("simd/if_mone_else/arithmetic" "core" ${all_types})
# ## make_units("simd/if_mone_else/logical" "core" ${all_types})
# ## make_units("simd/if_one_else/arithmetic" "core" ${all_types})
# ## make_units("simd/if_one_else/logical" "core" ${all_types})
# make_units("simd/binarize" "core" ${all_types})
# make_units("simd/bitofsign" "core" ${all_types})
# make_units("simd/bitwise_and" "core" ${all_types})
# make_units("simd/bitwise_andnot" "core" ${all_types})
# make_units("simd/bitwise_mask/arithmetic" "core" ${all_types})
# make_units("simd/bitwise_mask/logical"    "core" ${all_types})
# make_units("simd/bitwise_not" "core" ${all_types})
# make_units("simd/bitwise_notand" "core" ${all_types})
# make_units("simd/bitwise_notor" "core" ${all_types})
# make_units("simd/bitwise_or"  "core" ${all_types})
# make_units("simd/bitwise_ornot" "core" ${all_types})
# make_units("simd/bitwise_select"  "core" ${all_types})
# make_units("simd/bitwise_shl" "core" ${integral_types})
# make_units("simd/bitwise_shr" "core" ${integral_types})
# make_units("simd/bitwise_xor" "core" ${all_types})
# make_units("simd/ceil"   "core" ${all_types})
# make_units("simd/clamp" "core" ${all_types})
# make_units("simd/conj" "core" ${real_types})
# make_units("simd/copysign" "core" ${all_types})
# make_units("simd/dec" "core" ${all_types})
# make_units("simd/dist" "core" ${all_types})
# make_units("simd/div/arithmetic" "core" ${all_types})
# make_units("simd/div/saturated"  "core" ${all_types})
# make_units("simd/extract/arithmetic" "core" ${all_types})
# make_units("simd/extract/logical"    "core" ${all_types})
# make_units("simd/floor" "core" ${all_types})
# make_units("simd/fma" "core" ${all_types})
# make_units("simd/fms" "core" ${all_types})
# make_units("simd/fnma" "core" ${all_types})
# make_units("simd/fnms" "core" ${all_types})
# make_units("simd/horn"     "core" ${real_types})
# make_units("simd/horn1"     "core" ${real_types})
# make_units("simd/hypot"    "core" ${real_types})
# make_units("simd/if_add" "core" ${all_types})
# make_units("simd/if_allbits_else" "core" ${all_types})
# make_units("simd/if_div/arithmetic" "core" ${all_types})
# make_units("simd/if_div/saturated"  "core" ${all_types})
# make_units("simd/if_else/arithmetic" "core" ${all_types})
# make_units("simd/if_else/logical" "core" ${all_types})
# make_units("simd/if_else_allbits" "core" ${all_types})
# make_units("simd/if_else_zero" "core" ${all_types})
# make_units("simd/if_mul/arithmetic" "core" ${all_types})
# make_units("simd/if_mul/saturated"  "core" ${all_types})
# make_units("simd/if_sub" "core" ${all_types})
# make_units("simd/if_zero_else" "core" ${all_types})
# make_units("simd/ifnot_else/arithmetic" "core" ${all_types})
# make_units("simd/ifnot_else/logical" "core" ${all_types})
# make_units("simd/indeg" "core" ${real_types})
# make_units("simd/inpi" "core" ${real_types})
# make_units("simd/is_denormal" "core" ${all_types})
# make_units("simd/is_equal/arithmetic" "core" ${all_types})
# make_units("simd/is_equal/logical" "core" ${all_types})
# make_units("simd/is_equal_with_equal_nans/arithmetic" "core" ${all_types})
# make_units("simd/is_equal_with_equal_nans/logical" "core" ${all_types})
# make_units("simd/is_eqz" "core" ${all_types})
# make_units("simd/is_even" "core" ${all_types})
# make_units("simd/is_finite" "core" ${all_types})
# make_units("simd/is_flint" "core" ${all_types})
# make_units("simd/is_gez" "core" ${all_types})
# make_units("simd/is_greater/arithmetic" "core" ${all_types})
# make_units("simd/is_greater/logical" "core" ${all_types})
# make_units("simd/is_greater_equal/arithmetic" "core" ${all_types})
# make_units("simd/is_greater_equal/logical" "core" ${all_types})
# make_units("simd/is_gtz" "core" ${all_types})
# make_units("simd/is_imag" "core" ${all_types})
# make_units("simd/is_infinite" "core" ${all_types})
# make_units("simd/is_less/arithmetic" "core" ${all_types})
# make_units("simd/is_less/logical" "core" ${all_types})
# make_units("simd/is_less_equal/arithmetic" "core" ${all_types})
# make_units("simd/is_less_equal/logical" "core" ${all_types})
# make_units("simd/is_lessgreater/arithmetic" "core" ${all_types})
# make_units("simd/is_lessgreater/logical" "core" ${all_types})
# make_units("simd/is_lez" "core" ${all_types})
# make_units("simd/is_ltz" "core" ${all_types})
# make_units("simd/is_nan" "core" ${all_types})
# make_units("simd/is_negative" "core" ${all_types})
# make_units("simd/is_nez" "core" ${all_types})
# make_units("simd/is_ngez" "core" ${all_types})
# make_units("simd/is_ngtz" "core" ${all_types})
# make_units("simd/is_nlez" "core" ${all_types})
# make_units("simd/is_nltz" "core" ${all_types})
# make_units("simd/is_normal" "core" ${all_types})
# make_units("simd/is_not_denormal" "core" ${all_types})
# make_units("simd/is_not_equal/arithmetic" "core" ${all_types})
# make_units("simd/is_not_equal/logical" "core" ${all_types})
# make_units("simd/is_not_equal_with_equal_nans/arithmetic" "core" ${all_types})
# make_units("simd/is_not_equal_with_equal_nans/logical" "core" ${all_types})
# make_units("simd/is_not_finite" "core" ${all_types})
# make_units("simd/is_not_greater/arithmetic" "core" ${all_types})
# make_units("simd/is_not_greater/logical" "core" ${all_types})
# make_units("simd/is_not_greater_equal/arithmetic" "core" ${all_types})
# make_units("simd/is_not_greater_equal/logical" "core" ${all_types})
# make_units("simd/is_not_imag" "core" ${all_types})
# make_units("simd/is_not_inf" "core" ${all_types})
# make_units("simd/is_not_less/arithmetic" "core" ${all_types})
# make_units("simd/is_not_less/logical" "core" ${all_types})
# make_units("simd/is_not_less_equal/arithmetic" "core" ${all_types})
# make_units("simd/is_not_less_equal/logical" "core" ${all_types})
# make_units("simd/is_not_nan" "core" ${all_types})
# make_units("simd/is_not_real" "core" ${all_types})
# make_units("simd/is_odd" "core" ${all_types})
# make_units("simd/is_ordered" "core" ${all_types})
# make_units("simd/is_positive" "core" ${all_types})
# make_units("simd/is_real" "core" ${all_types})
# make_units("simd/is_unordered" "core" ${all_types})
# make_units("simd/logical_and/arithmetic" "core" ${all_types})
# make_units("simd/logical_and/logical" "core" ${all_types})
# make_units("simd/logical_andnot/arithmetic" "core" ${all_types})
# make_units("simd/logical_andnot/logical" "core" ${all_types})
# make_units("simd/logical_not/arithmetic" "core" ${all_types})
# make_units("simd/logical_not/logical" "core" ${all_types})
# make_units("simd/logical_notand/arithmetic" "core" ${all_types})
# make_units("simd/logical_notand/logical" "core" ${all_types})
# make_units("simd/logical_notor/arithmetic" "core" ${all_types})
# make_units("simd/logical_notor/logical" "core" ${all_types})
# make_units("simd/logical_or/arithmetic" "core" ${all_types})
# make_units("simd/logical_or/logical" "core" ${all_types})
# make_units("simd/logical_ornot/arithmetic" "core" ${all_types})
# make_units("simd/logical_ornot/logical" "core" ${all_types})
# make_units("simd/logical_xor/arithmetic" "core" ${all_types})
# make_units("simd/logical_xor/logical" "core" ${all_types})
# make_units("simd/max" "core" ${all_types})
# make_units("simd/maxmag" "core" ${all_types})
# make_units("simd/maxnummag" "core" ${all_types})
# make_units("simd/min" "core" ${all_types})
# make_units("simd/minmag" "core" ${all_types})
# make_units("simd/minnummag" "core" ${all_types})
# make_units("simd/mul/arithmetic" "core" ${all_types})
# make_units("simd/mul/saturated" "core" ${all_types})
# make_units("simd/nearest" "core" ${all_types})
# make_units("simd/oneminus/arithmetic"    "core" ${all_types})
# make_units("simd/oneminus/saturated"     "core" ${all_types})
# make_units("simd/rec" "core" ${all_types})
# make_units("simd/round" "core" ${all_types})
# make_units("simd/rshl" "core" ${integral_types})
# make_units("simd/rshr" "core" ${integral_types})
# make_units("simd/rsqrt" "core" ${real_types})
# make_units("simd/saturate" "core" ${all_types})
# make_units("simd/shl" "core" ${integral_types})
# make_units("simd/shr" "core" ${integral_types})
# make_units("simd/sign" "core" ${all_types})
# make_units("simd/signnz" "core" ${all_types})
# make_units("simd/sqr" "core" ${all_types})
# make_units("simd/sqr_abs" "core" ${real_types})
# make_units("simd/sqrt"    "core" ${all_types})
# make_units("simd/sub"         "core" ${all_types})
# make_units("simd/trunc"   "core" ${all_types})
# make_units("simd/unary_minus" "core" ${all_types})
# make_units("simd/unary_plus" "core" ${all_types})

##==================================================================================================
## Expected failures tests
check_failure( "core" failure/conditionnal/is_equal.cpp )
check_failure( "core" failure/conditionnal/is_not_equal.cpp )
check_failure( "core" failure/acos.cpp )
check_failure( "core" failure/asin.cpp )
check_failure( "core" failure/acot.cpp )
check_failure( "core" failure/asec.cpp )
check_failure( "core" failure/acsc.cpp )
check_failure( "core" failure/atan.cpp )
check_failure( "core" failure/atan2.cpp )
check_failure( "core" failure/atan2d.cpp )
check_failure( "core" failure/atan2pi.cpp )
check_failure( "core" failure/acosd.cpp )
check_failure( "core" failure/asind.cpp )
check_failure( "core" failure/acotd.cpp )
check_failure( "core" failure/asecd.cpp )
check_failure( "core" failure/acscd.cpp )
check_failure( "core" failure/atand.cpp )
check_failure( "core" failure/acospi.cpp )
check_failure( "core" failure/asinpi.cpp )
check_failure( "core" failure/acotpi.cpp )
check_failure( "core" failure/asecpi.cpp )
check_failure( "core" failure/acscpi.cpp )
check_failure( "core" failure/atanpi.cpp )
check_failure( "core" failure/bitwise_cast.cpp )
check_failure( "core" failure/bitwise_and.cpp )
check_failure( "core" failure/indeg.cpp )
check_failure( "core" failure/inpi.cpp )
check_failure( "core" failure/sqr_abs.cpp )
check_failure( "core" failure/arg.cpp )
