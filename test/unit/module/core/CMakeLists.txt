##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright 2019 Joel FALCOU
##  Copyright 2019 Jean-Thierry Lapreste
##
##  Licensed under the MIT License <http://opensource.org/licenses/MIT>.
##  SPDX-License-Identifier: MIT
##==================================================================================================

##==================================================================================================
## Setup aggregation of tests
##==================================================================================================
add_custom_target(unit.core.tst                )
add_custom_target(unit.core.constant.tst       )
add_custom_target(unit.core.constant.scalar.tst)
add_custom_target(unit.core.constant.simd.tst  )
add_custom_target(unit.core.scalar.tst         )
add_custom_target(unit.core.simd.tst           )

add_dependencies(unit.scalar.tst        unit.core.scalar.tst          )
add_dependencies(unit.simd.tst          unit.core.simd.tst            )
add_dependencies(unit.core.constant.tst unit.core.constant.scalar.tst )
add_dependencies(unit.core.constant.tst unit.core.constant.simd.tst   )
add_dependencies(unit.core.scalar.tst   unit.core.constant.scalar.tst )
add_dependencies(unit.core.simd.tst     unit.core.constant.simd.tst   )
add_dependencies(unit.core.tst          unit.core.constant.tst        )
add_dependencies(unit.core.tst          unit.core.scalar.tst          )
add_dependencies(unit.core.tst          unit.core.simd.tst            )

##==================================================================================================
## Other tests
##==================================================================================================
add_subdirectory(failure)

##==================================================================================================
## Elementwise function unit tests
##==================================================================================================
make_all_units(ROOT unit.core NAME abs                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME add                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME arg                   ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME average               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME binarize              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME binarize_not          ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME bitofsign             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME bit_and               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME bit_andnot            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME bit_cast              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME bit_ceil              ARCH scalar simd TYPES ${uint_or_real_types})
make_all_units(ROOT unit.core NAME bit_floor             ARCH scalar simd TYPES ${uint_or_real_types})
make_all_units(ROOT unit.core NAME bit_mask              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME bit_not               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME bit_notand            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME bit_notor             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME bit_or                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME bit_ornot             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME bit_select            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME bit_shl               ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.core NAME bit_shr               ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.core NAME bit_xor               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME bit_width             ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT unit.core NAME cbrt                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME ceil                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME clamp                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME conj                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME convert               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME copysign              ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME countl_one            ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT unit.core NAME countl_zero           ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT unit.core NAME countr_one            ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT unit.core NAME countr_zero           ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT unit.core NAME dec                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME dist                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME div                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME exponent              ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME extract               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME fdim                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME firstbitset           ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.core NAME firstbitunset         ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.core NAME floor                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME fma                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME fms                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME fnma                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME fnms                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME frac                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME frexp                 ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME gather                ARCH simd        TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME gcd                   ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.core NAME has_single_bit        ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.core NAME horn                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME horn1                 ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME hypot                 ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME iceil                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME if_else               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME ifloor                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME ifrexp                ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME inc                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME inearest              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME iround                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_denormal           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_equal              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_eqz                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_even               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_finite             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_flint              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_gez                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_greater            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_greater_equal      ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_gtz                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_imag               ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME is_infinite           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_less               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_less_equal         ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_lessgreater        ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_lez                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_ltz                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_nan                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_negative           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_nez                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_ngez               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_ngtz               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_nlez               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_nltz               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_normal             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_not_denormal       ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_not_equal          ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_not_finite         ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_not_flint          ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME is_not_greater        ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_not_greater_equal  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_not_imag           ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME is_not_inf            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_not_less           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_not_less_equal     ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_not_nan            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_not_real           ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME is_odd                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_ordered            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_positive           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME is_pow2               ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.core NAME is_real               ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME is_unordered          ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME itrunc                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME lcm                   ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.core NAME ldexp                 ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME lerp                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME logical_and           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME logical_andnot        ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME logical_not           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME logical_notand        ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME logical_notor         ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME logical_or            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME logical_ornot         ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME logical_xor           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME lookup                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME manhattan             ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME mantissa              ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME max                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME maxmag                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME min                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME minmag                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME minus                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME modf                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME mul                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME nbtrue                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME nb_values             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME nearest               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME negate                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME negatenz              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME next                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME nextafter             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME none                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME oneminus              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME plus                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME popcount              ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.core NAME prev                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME rec                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME reduce                ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME reduce_fast           ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME reduce_large          ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME reduce_medium         ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME rem                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME rotl                  ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT unit.core NAME rotr                  ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT unit.core NAME round                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME rshl                  ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.core NAME rshr                  ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.core NAME rsqrt                 ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME saturate              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME shl                   ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.core NAME shr                   ARCH scalar simd TYPES ${integral_types})
# make_all_units(ROOT unit.core NAME shuffle                   ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.core NAME sign                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME signnz                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME sqr                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME sqr_abs               ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME sqrt                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME sub                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME trunc                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.core NAME two_split             ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.core NAME ulpdist               ARCH scalar simd TYPES ${all_types}     )
