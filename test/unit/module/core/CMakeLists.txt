##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright 2019 Joel FALCOU
##  Copyright 2019 Jean-Thierry Lapreste
##
##  Licensed under the MIT License <http://opensource.org/licenses/MIT>.
##  SPDX-License-Identifier: MIT
##==================================================================================================

##==================================================================================================
## Setup aggregation of tests
##==================================================================================================
add_custom_target(core.unit)
add_custom_target(core.constant.unit)
add_custom_target(core.constant.scalar.unit)
add_custom_target(core.constant.simd.unit)
add_custom_target(core.scalar.unit)
add_custom_target(core.simd.unit)
add_dependencies(core.constant.unit core.constant.scalar.unit)
add_dependencies(core.constant.unit core.constant.simd.unit)
add_dependencies(core.scalar.unit   core.constant.scalar.unit)
add_dependencies(core.simd.unit     core.constant.simd.unit)
add_dependencies(core.unit core.constant.unit)
add_dependencies(core.unit core.scalar.unit)
add_dependencies(core.unit core.simd.unit)

##==================================================================================================
## Other tests
##==================================================================================================
add_subdirectory(failure)
add_subdirectory(constant)

##==================================================================================================
## Elementwise function unit tests
##==================================================================================================
make_all_units(ROOT core NAME abs                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME add                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME arg                   ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME average               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME binarize              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME binarize_not          ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME bitofsign             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME bit_and               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME bit_andnot            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME bit_cast              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME bit_ceil              ARCH scalar simd TYPES ${uint_or_real_types})
make_all_units(ROOT core NAME bit_floor             ARCH scalar simd TYPES ${uint_or_real_types})
make_all_units(ROOT core NAME bit_mask              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME bit_not               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME bit_notand            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME bit_notor             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME bit_or                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME bit_ornot             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME bit_select            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME bit_shl               ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT core NAME bit_shr               ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT core NAME bit_xor               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME bit_width             ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT core NAME cbrt                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME ceil                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME clamp                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME conj                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME convert               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME copysign              ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME countl_one            ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT core NAME countl_zero           ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT core NAME countr_one            ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT core NAME countr_zero           ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT core NAME dec                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME dist                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME div                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME exponent              ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME extract               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME fdim                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME firstbitset           ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT core NAME firstbitunset         ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT core NAME floor                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME fma                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME fms                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME fnma                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME fnms                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME frac                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME frexp                 ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME gather                ARCH simd        TYPES ${all_types}     )
make_all_units(ROOT core NAME gcd                   ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT core NAME has_single_bit        ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT core NAME horn                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME horn1                 ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME hypot                 ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME iceil                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME if_else               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME ifloor                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME ifrexp                ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME inc                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME inearest              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME iround                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_denormal           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_equal              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_eqz                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_even               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_finite             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_flint              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_gez                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_greater            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_greater_equal      ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_gtz                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_imag               ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME is_infinite           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_less               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_less_equal         ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_lessgreater        ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_lez                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_ltz                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_nan                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_negative           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_nez                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_ngez               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_ngtz               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_nlez               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_nltz               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_normal             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_not_denormal       ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_not_equal          ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_not_finite         ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_not_flint          ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME is_not_greater        ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_not_greater_equal  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_not_imag           ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME is_not_inf            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_not_less           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_not_less_equal     ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_not_nan            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_not_real           ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME is_odd                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_ordered            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_positive           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME is_pow2               ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT core NAME is_real               ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME is_unordered          ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME itrunc                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME lcm                   ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT core NAME ldexp                 ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME lerp                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME logical_and           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME logical_andnot        ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME logical_not           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME logical_notand        ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME logical_notor         ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME logical_or            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME logical_ornot         ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME logical_xor           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME lookup                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME manhattan             ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME mantissa              ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME max                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME maxmag                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME min                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME minmag                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME minus                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME modf                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME mul                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME nbtrue                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME nb_values             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME nearest               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME negate                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME negatenz              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME next                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME nextafter             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME none                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME oneminus              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME plus                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME popcount              ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT core NAME prev                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME rec                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME reduce                ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME reduce_fast           ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME reduce_large          ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME reduce_medium         ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME rem                   ARCH scalar simd TYPES ${signed_types}  )
make_all_units(ROOT core NAME rotl                  ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT core NAME rotr                  ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT core NAME round                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME rshl                  ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT core NAME rshr                  ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT core NAME rsqrt                 ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME saturate              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME shl                   ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT core NAME shr                   ARCH scalar simd TYPES ${integral_types})
# make_all_units(ROOT core NAME shuffle                   ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT core NAME sign                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME signnz                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME sqr                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME sqr_abs               ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME sqrt                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME sub                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME trunc                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT core NAME two_split             ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT core NAME ulpdist               ARCH scalar simd TYPES ${all_types}     )
