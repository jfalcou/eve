##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright : EVE Contributors & Maintainers
##  SPDX-License-Identifier: MIT
##==================================================================================================

##==================================================================================================
## Setup aggregation of tests
##==================================================================================================
add_custom_target(unit.real.core.exe                )
add_custom_target(unit.real.core.constant.exe       )
add_custom_target(unit.real.core.constant.scalar.exe)
add_custom_target(unit.real.core.constant.simd.exe  )
add_custom_target(unit.real.core.scalar.exe         )
add_custom_target(unit.real.core.simd.exe           )

add_dependencies(unit.real.scalar.exe        unit.real.core.scalar.exe          )
add_dependencies(unit.real.simd.exe          unit.real.core.simd.exe            )
add_dependencies(unit.real.core.constant.exe unit.real.core.constant.scalar.exe )
add_dependencies(unit.real.core.constant.exe unit.real.core.constant.simd.exe   )
add_dependencies(unit.real.core.scalar.exe   unit.real.core.constant.scalar.exe )
add_dependencies(unit.real.core.simd.exe     unit.real.core.constant.simd.exe   )
add_dependencies(unit.real.core.exe          unit.real.core.constant.exe        )
add_dependencies(unit.real.core.exe          unit.real.core.scalar.exe          )
add_dependencies(unit.real.core.exe          unit.real.core.simd.exe            )

##==================================================================================================
## new style tests
##==================================================================================================
make_unit("unit.real.core"  abs.cpp           )
make_unit("unit.real.core"  add.cpp           )
make_unit("unit.real.core"  arg.cpp           )
make_unit("unit.real.core"  average.cpp       )
make_unit("unit.real.core"  binarize.cpp      )
make_unit("unit.real.core"  binarize_not.cpp  )
make_unit("unit.real.core"  bit_and.cpp       )
make_unit("unit.real.core"  bit_andnot.cpp    )
make_unit("unit.real.core"  bit_cast.cpp      )
make_unit("unit.real.core"  bit_ceil.cpp      )
make_unit("unit.real.core"  bit_floor.cpp     )
make_unit("unit.real.core"  bit_mask.cpp      )
make_unit("unit.real.core"  bit_not.cpp       )
make_unit("unit.real.core"  bit_notand.cpp    )
make_unit("unit.real.core"  bit_or.cpp        )
make_unit("unit.real.core"  bit_ornot.cpp     )
make_unit("unit.real.core"  bit_notor.cpp     )
make_unit("unit.real.core"  bit_select.cpp    )
make_unit("unit.real.core"  bit_shl.cpp       )
make_unit("unit.real.core"  bit_shr.cpp       )
make_unit("unit.real.core"  bit_width.cpp     )
make_unit("unit.real.core"  bit_xor.cpp       )
make_unit("unit.real.core"  bitofsign.cpp     )
make_unit("unit.real.core"  cbrt.cpp          )
make_unit("unit.real.core"  clamp.cpp         )
make_unit("unit.real.core"  fma.cpp           )
make_unit("unit.real.core"  shl.cpp           )
make_unit("unit.real.core"  shr.cpp           )

##==================================================================================================
## Other tests
##==================================================================================================
add_subdirectory(failure)

##==================================================================================================
## Elementwise function unit tests
##==================================================================================================
##make_all_units(ROOT unit.real.core NAME abs                   ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME add                   ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME arg                   ARCH scalar simd TYPES ${real_types}    )
##make_all_units(ROOT unit.real.core NAME average               ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME binarize              ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME binarize_not          ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME bitofsign             ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME bit_and               ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME bit_andnot            ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME bit_cast              ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME bit_ceil              ARCH scalar simd TYPES ${uint_or_real_types})
##make_all_units(ROOT unit.real.core NAME bit_floor             ARCH scalar simd TYPES ${uint_or_real_types})
##make_all_units(ROOT unit.real.core NAME bit_mask              ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME bit_not               ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME bit_notand            ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME bit_notor             ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME bit_or                ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME bit_ornot             ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME bit_select            ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME bit_shl               ARCH scalar simd TYPES ${integral_types})
##make_all_units(ROOT unit.real.core NAME bit_shr               ARCH scalar simd TYPES ${integral_types})
##make_all_units(ROOT unit.real.core NAME bit_xor               ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME bit_width             ARCH scalar simd TYPES ${uint_types}    )
##make_all_units(ROOT unit.real.core NAME cbrt                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME ceil                  ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME clamp                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME conj                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME convert               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME copysign              ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME countl_one            ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT unit.real.core NAME countl_zero           ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT unit.real.core NAME countr_one            ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT unit.real.core NAME countr_zero           ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT unit.real.core NAME dec                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME dist                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME div                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME epsilon               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME exponent              ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME extract               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME fdim                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME firstbitset           ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.real.core NAME firstbitunset         ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.real.core NAME floor                 ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME fma                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME fms                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME fnma                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME fnms                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME frac                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME frexp                 ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME ffs                   ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT unit.real.core NAME fls                   ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT unit.real.core NAME gather                ARCH        simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME gegenbauer            ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME geommean              ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME has_single_bit        ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.real.core NAME hermite               ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME hi                    ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.real.core NAME horn                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME horn1                 ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME hypot                 ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME iceil                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME if_else               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME ifloor                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME ifrexp                ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME inc                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME inearest              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME iround                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_denormal           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_equal              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_eqz                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_even               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_finite             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_flint              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_gez                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_greater            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_greater_equal      ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_gtz                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_imag               ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME is_infinite           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_less               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_less_equal         ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_lessgreater        ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_lez                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_ltz                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_nan                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_negative           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_nez                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_ngez               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_ngtz               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_nlez               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_nltz               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_normal             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_not_denormal       ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_not_equal          ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_not_finite         ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_not_flint          ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME is_not_greater        ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_not_greater_equal  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_not_imag           ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME is_not_inf            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_not_less           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_not_less_equal     ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_not_nan            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_not_real           ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME is_odd                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_ordered            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_positive           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME is_pow2               ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.real.core NAME is_real               ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME is_unordered          ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME itrunc                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME laguerre              ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME ldexp                 ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME legendre              ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME lerp                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME lo                    ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.real.core NAME logical_and           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME logical_andnot        ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME logical_not           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME logical_notand        ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME logical_notor         ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME logical_or            ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME logical_ornot         ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME logical_xor           ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME lohi                  ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.real.core NAME lookup                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME manhattan             ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME mantissa              ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME max                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME maxmag                ARCH scalar simd TYPES ${signed_types}  )
make_all_units(ROOT unit.real.core NAME min                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME minmag                ARCH scalar simd TYPES ${signed_types}  )
make_all_units(ROOT unit.real.core NAME minus                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME modf                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME mul                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME count_true                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME nb_values             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME nearest               ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME negate                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME negatenz              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME next                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME nextafter             ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME none                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME oneminus              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME plus                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME popcount              ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.real.core NAME prev                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME rec                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME reduce                ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME reduce_fast           ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME reduce_large          ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME reduce_medium         ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME rem                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME rotl                  ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT unit.real.core NAME rotr                  ARCH scalar simd TYPES ${uint_types}    )
make_all_units(ROOT unit.real.core NAME round                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME rshl                  ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.real.core NAME rshr                  ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.real.core NAME rsqrt                 ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME saturate              ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME shl                   ARCH scalar simd TYPES ${integral_types})
##make_all_units(ROOT unit.real.core NAME shr                   ARCH scalar simd TYPES ${integral_types})
## make_all_units(ROOT unit.real.core NAME shuffle                   ARCH scalar simd TYPES ${integral_types})
make_all_units(ROOT unit.real.core NAME sign                  ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME significants          ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME signnz                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME sqr                   ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME sqr_abs               ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME sqrt                  ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME sub                   ARCH scalar simd TYPES ${all_types}     )
##make_all_units(ROOT unit.real.core NAME tcheb                 ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME trunc                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME two_split             ARCH scalar simd TYPES ${real_types}    )
make_all_units(ROOT unit.real.core NAME ulpdist               ARCH scalar simd TYPES ${all_types}     )
