##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright : EVE Contributors & Maintainers
##  SPDX-License-Identifier: MIT
##==================================================================================================

##==================================================================================================
## Setup aggregation of tests
##==================================================================================================
add_custom_target(unit.real.core.exe                )
add_custom_target(unit.real.core.constant.exe       )
add_custom_target(unit.real.core.constant.scalar.exe)
add_custom_target(unit.real.core.constant.simd.exe  )
add_custom_target(unit.real.core.scalar.exe         )
add_custom_target(unit.real.core.simd.exe           )

add_dependencies(unit.real.scalar.exe        unit.real.core.scalar.exe          )
add_dependencies(unit.real.simd.exe          unit.real.core.simd.exe            )
add_dependencies(unit.real.core.constant.exe unit.real.core.constant.scalar.exe )
add_dependencies(unit.real.core.constant.exe unit.real.core.constant.simd.exe   )
add_dependencies(unit.real.core.scalar.exe   unit.real.core.constant.scalar.exe )
add_dependencies(unit.real.core.simd.exe     unit.real.core.constant.simd.exe   )
add_dependencies(unit.real.core.exe          unit.real.core.constant.exe        )
add_dependencies(unit.real.core.exe          unit.real.core.scalar.exe          )
add_dependencies(unit.real.core.exe          unit.real.core.simd.exe            )

##==================================================================================================
## new style tests
##==================================================================================================
make_unit("unit.real.core"  abs.cpp                  )
make_unit("unit.real.core"  absmax.cpp               )
make_unit("unit.real.core"  absmin.cpp               )
make_unit("unit.real.core"  add.cpp                  )
make_unit("unit.real.core"  arg.cpp                  )
make_unit("unit.real.core"  average.cpp              )
make_unit("unit.real.core"  binarize.cpp             )
make_unit("unit.real.core"  binarize_not.cpp         )
make_unit("unit.real.core"  bit_and.cpp              )
make_unit("unit.real.core"  bit_andnot.cpp           )
make_unit("unit.real.core"  bit_cast.cpp             )
make_unit("unit.real.core"  bit_ceil.cpp             )
make_unit("unit.real.core"  bit_floor.cpp            )
make_unit("unit.real.core"  bit_mask.cpp             )
make_unit("unit.real.core"  bit_not.cpp              )
make_unit("unit.real.core"  bit_notand.cpp           )
make_unit("unit.real.core"  bit_or.cpp               )
make_unit("unit.real.core"  bit_ornot.cpp            )
make_unit("unit.real.core"  bit_notor.cpp            )
make_unit("unit.real.core"  bit_select.cpp           )
make_unit("unit.real.core"  bit_shl.cpp              )
make_unit("unit.real.core"  bit_shr.cpp              )
make_unit("unit.real.core"  bit_width.cpp            )
make_unit("unit.real.core"  bit_xor.cpp              )
make_unit("unit.real.core"  bitofsign.cpp            )
make_unit("unit.real.core"  cbrt.cpp                 )
make_unit("unit.real.core"  ceil.cpp                 )
make_unit("unit.real.core"  clamp.cpp                )
make_unit("unit.real.core"  conj.cpp                 )
make_unit("unit.real.core"  copysign.cpp             )
make_unit("unit.real.core"  countl_one.cpp           )
make_unit("unit.real.core"  countl_zero.cpp          )
make_unit("unit.real.core"  countr_one.cpp           )
make_unit("unit.real.core"  countr_zero.cpp          )
make_unit("unit.real.core"  dec.cpp                  )
make_unit("unit.real.core"  div_deco.cpp             )
make_unit("unit.real.core"  dist.cpp                 )
make_unit("unit.real.core"  div.cpp                  )
make_unit("unit.real.core"  decorated.div.cpp        )
make_unit("unit.real.core"  epsilon.cpp              )
make_unit("unit.real.core"  fam.cpp                  )
make_unit("unit.real.core"  fanm.cpp                 )
make_unit("unit.real.core"  firstbitset.cpp          )
make_unit("unit.real.core"  firstbitunset.cpp        )
make_unit("unit.real.core"  fdim.cpp                 )
make_unit("unit.real.core"  ffs.cpp                  )
make_unit("unit.real.core"  floor.cpp                )
make_unit("unit.real.core"  fls.cpp                  )
make_unit("unit.real.core"  fma.cpp                  )
make_unit("unit.real.core"  fms.cpp                  )
make_unit("unit.real.core"  fnma.cpp                 )
make_unit("unit.real.core"  fnms.cpp                 )
make_unit("unit.real.core"  frac.cpp                 )
make_unit("unit.real.core"  fracscale.cpp            )
make_unit("unit.real.core"  fsm.cpp                  )
make_unit("unit.real.core"  fsnm.cpp                 )
make_unit("unit.real.core"  geommean.cpp             )
make_unit("unit.real.core"  has_single_bit.cpp       )
make_unit("unit.real.core"  hi.cpp                   )
make_unit("unit.real.core"  hypot.cpp                )
make_unit("unit.real.core"  if_else.cpp              )
make_unit("unit.real.core"  inc.cpp                  )
make_unit("unit.real.core"  is_equal.cpp             )
make_unit("unit.real.core"  is_eqz.cpp               )
make_unit("unit.real.core"  is_even.cpp              )
make_unit("unit.real.core"  is_gez.cpp               )
make_unit("unit.real.core"  is_greater.cpp           )
make_unit("unit.real.core"  is_greater_equal.cpp     )
make_unit("unit.real.core"  is_gtz.cpp               )
make_unit("unit.real.core"  is_less.cpp              )
make_unit("unit.real.core"  is_less_equal.cpp        )
make_unit("unit.real.core"  is_lez.cpp               )
make_unit("unit.real.core"  is_ltz.cpp               )
make_unit("unit.real.core"  is_nez.cpp               )
make_unit("unit.real.core"  is_not_equal.cpp         )
make_unit("unit.real.core"  is_odd.cpp               )
make_unit("unit.real.core"  is_pow2.cpp              )
make_unit("unit.real.core"  lerp.cpp                 )
make_unit("unit.real.core"  lo.cpp                   )
make_unit("unit.real.core"  lookup.cpp               )
make_unit("unit.real.core"  logical_and.cpp          )
make_unit("unit.real.core"  logical_andnot.cpp       )
make_unit("unit.real.core"  logical_not.cpp          )
make_unit("unit.real.core"  logical_notand.cpp       )
make_unit("unit.real.core"  logical_notor.cpp        )
make_unit("unit.real.core"  logical_or.cpp           )
make_unit("unit.real.core"  logical_ornot.cpp        )
make_unit("unit.real.core"  logical_xor.cpp          )
make_unit("unit.real.core"  lohi.cpp                 )
make_unit("unit.real.core"  manhattan.cpp            )
make_unit("unit.real.core"  max.cpp                  )
make_unit("unit.real.core"  maxabs.cpp               )
make_unit("unit.real.core"  maxmag.cpp               )
make_unit("unit.real.core"  min.cpp                  )
make_unit("unit.real.core"  minabs.cpp               )
make_unit("unit.real.core"  minmag.cpp               )
make_unit("unit.real.core"  minus.cpp                )
make_unit("unit.real.core"  modf.cpp                 )
make_unit("unit.real.core"  mul.cpp                  )
make_unit("unit.real.core"  nb_values.cpp            )
make_unit("unit.real.core"  negate.cpp               )
make_unit("unit.real.core"  negatenz.cpp             )
make_unit("unit.real.core"  nearest.cpp              )
make_unit("unit.real.core"  negabsmax.cpp            )
make_unit("unit.real.core"  negabsmin.cpp            )
make_unit("unit.real.core"  negmaxabs.cpp            )
make_unit("unit.real.core"  negminabs.cpp            )
make_unit("unit.real.core"  oneminus.cpp             )
make_unit("unit.real.core"  plus.cpp                 )
make_unit("unit.real.core"  popcount.cpp             )
make_unit("unit.real.core"  rat.cpp                  )
make_unit("unit.real.core"  rec.cpp                  )

make_unit("unit.real.core"  rem.cpp                  )
make_unit("unit.real.core"  remdiv.cpp               )
make_unit("unit.real.core"  rotl.cpp                 )
make_unit("unit.real.core"  rotr.cpp                 )
make_unit("unit.real.core"  round.cpp                )
make_unit("unit.real.core"  roundscale.cpp           )
make_unit("unit.real.core"  rshl.cpp                 )
make_unit("unit.real.core"  rshr.cpp                 )
make_unit("unit.real.core"  rsqrt.cpp                )

make_unit("unit.real.core"  decorated.rem.cpp        )
make_unit("unit.real.core"  shl.cpp                  )
make_unit("unit.real.core"  shr.cpp                  )
make_unit("unit.real.core"  sign.cpp                 )
make_unit("unit.real.core"  signnz.cpp               )
make_unit("unit.real.core"  significants.cpp         )
make_unit("unit.real.core"  sqr.cpp                  )
make_unit("unit.real.core"  sqr_abs.cpp              )
make_unit("unit.real.core"  sqrt.cpp                 )
make_unit("unit.real.core"  sub.cpp                  )
make_unit("unit.real.core"  trunc.cpp                )

make_unit("unit.real.core"  convert/to_double.cpp    )
make_unit("unit.real.core"  convert/to_float.cpp     )
make_unit("unit.real.core"  convert/to_int64.cpp     )
make_unit("unit.real.core"  convert/to_int32.cpp     )
make_unit("unit.real.core"  convert/to_int16.cpp     )
make_unit("unit.real.core"  convert/to_int8.cpp      )
make_unit("unit.real.core"  convert/to_uint64.cpp    )
make_unit("unit.real.core"  convert/to_uint32.cpp    )
make_unit("unit.real.core"  convert/to_uint16.cpp    )
make_unit("unit.real.core"  convert/to_uint8.cpp     )
make_unit("unit.real.core"  convert/to_tuple.cpp     )

##==================================================================================================
## Other tests
##==================================================================================================
add_subdirectory(failure)

##==================================================================================================
## Elementwise function unit tests
##==================================================================================================
make_all_units(ROOT unit.real.core NAME gather                ARCH        simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME iceil                 ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME ifloor                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME inearest              ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME iround                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME itrunc                ARCH scalar simd TYPES ${all_types}     )
make_all_units(ROOT unit.real.core NAME saturate              ARCH scalar simd TYPES ${all_types}     )
