##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright : EVE Project Contributors
##  SPDX-License-Identifier: BSL-1.0
##==================================================================================================

add_custom_target(unit.complex.exe              )
add_dependencies(unit.exe unit.complex.exe      )

make_unit("unit.complex"  abs.cpp               )
make_unit("unit.complex"  acos.cpp              )
make_unit("unit.complex"  acosh.cpp             )
make_unit("unit.complex"  asin.cpp              )
make_unit("unit.complex"  asinh.cpp             )
make_unit("unit.complex"  atan.cpp              )
make_unit("unit.complex"  atanh.cpp             )
make_unit("unit.complex"  average.cpp           )
make_unit("unit.complex"  beta.cpp              )
make_unit("unit.complex"  ceil.cpp              )
make_unit("unit.complex"  constructor.cpp       )
make_unit("unit.complex"  cos.cpp               )
make_unit("unit.complex"  cospi.cpp             )
make_unit("unit.complex"  cosh.cpp              )
make_unit("unit.complex"  cotpi.cpp             )
make_unit("unit.complex"  dec.cpp               )
make_unit("unit.complex"  digamma.cpp           )
make_unit("unit.complex"  div.cpp               )
make_unit("unit.complex"  erf.cpp               )
make_unit("unit.complex"  exp10.cpp             )
make_unit("unit.complex"  exp2.cpp              )
make_unit("unit.complex"  exp.cpp               )
make_unit("unit.complex"  exp_i.cpp             )
make_unit("unit.complex"  exp_ipi.cpp           )
make_unit("unit.complex"  expm1.cpp             )
make_unit("unit.complex"  floor.cpp             )
make_unit("unit.complex"  frac.cpp              )
make_unit("unit.complex"  i.cpp                 )
make_unit("unit.complex"  if_else.cpp           )
make_unit("unit.complex"  imag.cpp              )
make_unit("unit.complex"  inc.cpp               )
make_unit("unit.complex"  is_finite.cpp         )
make_unit("unit.complex"  is_imag.cpp           )
make_unit("unit.complex"  is_infinite.cpp       )
make_unit("unit.complex"  is_nan.cpp            )
make_unit("unit.complex"  is_not_finite.cpp     )
make_unit("unit.complex"  is_real.cpp           )
make_unit("unit.complex"  lbeta.cpp             )
make_unit("unit.complex"  log10.cpp             )
make_unit("unit.complex"  log1p.cpp             )
make_unit("unit.complex"  log2.cpp              )
make_unit("unit.complex"  log.cpp               )
make_unit("unit.complex"  log_abs.cpp           )
make_unit("unit.complex"  log_abs_gamma.cpp     )
make_unit("unit.complex"  log_gamma.cpp         )
###make_unit("unit.complex"  lrising_factorial.cpp )
make_unit("unit.complex"  maxabs.cpp            )
make_unit("unit.complex"  minabs.cpp            )
make_unit("unit.complex"  mul.cpp               )
make_unit("unit.complex"  nearest.cpp           )
make_unit("unit.complex"  oneminus.cpp          )
make_unit("unit.complex"  operators.cpp         )
make_unit("unit.complex"  polar.cpp             )
make_unit("unit.complex"  pow.cpp               )
make_unit("unit.complex"  proj.cpp              )
make_unit("unit.complex"  real.cpp              )
make_unit("unit.complex"  rising_factorial.cpp  )
make_unit("unit.complex"  sin.cpp               )
make_unit("unit.complex"  sinh.cpp              )
make_unit("unit.complex"  sinpi.cpp             )
make_unit("unit.complex"  sqr.cpp               )
make_unit("unit.complex"  sqrt.cpp              )
make_unit("unit.complex"  tan.cpp               )
make_unit("unit.complex"  tanpi.cpp             )
make_unit("unit.complex"  tanh.cpp              )
make_unit("unit.complex"  tgamma.cpp            )
make_unit("unit.complex"  trunc.cpp             )
