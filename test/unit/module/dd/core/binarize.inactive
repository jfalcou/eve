//==================================================================================================
/**
  EVE - Expressive Vector Engine
  Copyright : EVE Project Contributors
  SPDX-License-Identifier: BSL-1.0
**/
//==================================================================================================

#include "test.hpp"
#include "../measures.hpp"
#include <eve/module/dd.hpp>

TTS_CASE_WITH( "Check behavior of binarize on scalar"
             , tts::bunch<eve::test::scalar::ieee_reals>
             , tts::generate ( tts::randoms(-10, 10)
                             , tts::randoms(-10, 10)
                             )
             )
  <typename T>(T const& a0, T const& a1 )
{
  using e_t = typename T::value_type;
  using dd_t = eve::dd<e_t>;
  for(auto e : a0)
  {
    for(auto f : a1)
    {
      auto z = dd_t(e, f);
      TTS_EQUAL ( eve::domain::dd(eve::binarize)(eve::logical<e_t>(z >= eve::one(eve::as(z)))), dd_t(eve::binarize(z >= one(as(z)))));
    }
  }
};

// TTS_CASE_WITH( "Check behavior of binarize on wide"
//              , eve::test::simd::ieee_reals
//              , tts::generate ( tts::randoms(-10, 10)
//                              , tts::randoms(-10, 10)
//                              )
//              )
//   <typename T>(T const& a0, T const& a1 )
// {
//   auto z = make_dd(a0,a1) >= eve::one(eve::as(z));
//   auto az = decltype(z)(eve::detail::map(eve::binarize, z));
//   TTS_EQUAL ( eve::binarize(z), az);
// };
