.. _function-unary_minus:

###########
unary_minus
###########

**Required header:** ``#include <eve/function/unary_minus.hpp>``

.. code-block:: c++

   namespace eve
   {
      constexpr /* implementation defined */ unary_minus = {};
   }

Function object computing the opposite  of a :ref:`Value <concept-value>`.
Infix notation: `-` can be used.

Synopsis
********

.. code-block:: c++

   template<typename T> constexpr T operator()( T const & x ) noexcept;

*  Computes the element-wise minus value of the parameter.

Parameters
**********

* ``x``: Instance of a  :ref:`Value <concept-value>`.

Return value
**************

* A value with the same type as the parameter.

Notes
*****

  - unary_minus on floating point types only changes the bit of sign.

  - take care that the infix notation on standard scalar can imply **C++** promotion as it is the original **C++** operator.

  - :ref:`masked call <feature-maskable>` is allowed: ``unary_minus[cond](x)`` is equivalent to ``if_else(cond, unary_minus(x), x)``, 
    but can be subject to optimization.

  - Be aware that for signed integers the absolute value of :ref:`Valmin <constant-valmin>` is
    not representable  in the input type and the result is undefined.

.. seealso::  :ref:`unary_plus <function-unary_plus>`

Example
*******

.. include:: ../../../../test/doc/core/unary_minus.cpp
  :literal:

Possible output:

.. include:: ../../../../test/doc/core/unary_minus.txt
  :literal:
