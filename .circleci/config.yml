##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright 2018-2021 Joel FALCOU
##  Copyright 2018-2021 Jean-Thierry LAPRESTE
##
##  Licensed under the MIT License <http://opensource.org/licenses/MIT>.
##  SPDX-License-Identifier: MIT
##==================================================================================================
version: 2.1

##==================================================================================================
## Custom commands
##==================================================================================================
commands:
  run_test:
    description: "Configure and run tests from a CMake Toolchain"
    parameters:
      desc:
        type: string
      tool:
        type: string
      options:
        type: string
        default: ""
      setup:
        type: string
        default: ""
    steps:
      - run:
          name: << parameters.desc >>
          command:                                                                                    |
            mkdir -p build && cd build                                                                &&
            cmake .. -G Ninja -DCMAKE_TOOLCHAIN_FILE=<< parameters.tool >> -DCMAKE_CXX_FLAGS="<< parameters.options >>" << parameters.setup >>&&
            ninja unit.real.math.heavy.exe  -k 0 -j 2                                                 &&
            ninja unit.arch.exe             -k 0 -j 8 && ctest -R "^unit.arch\..*\.exe"         -j 8  &&
            ninja unit.meta.exe             -k 0 -j 8 && ctest -R "^unit.meta\..*\.exe"         -j 8  &&
            ninja unit.internals.exe        -k 0 -j 8 && ctest -R "^unit.internals\..*\.exe"    -j 8  &&
            ninja unit.api.exe              -k 0 -j 8 && ctest -R "^unit.api\..*\.exe"          -j 8  &&
            ninja doc.exe                   -k 0 -j 8 && ctest -R "^doc\..*\.exe"               -j 8  &&
            ninja unit.simd.exe             -k 0 -j 8 && ctest -R "^unit\..*\..*\..*\.simd.exe" -j 8
  run_test_avx512:
    description: "Configure and run tests from a CMake Toolchain"
    parameters:
      desc:
        type: string
      tool:
        type: string
      options:
        type: string
        default: ""
      setup:
        type: string
        default: ""
    steps:
      - run:
          name: << parameters.desc >>
          command:                                                                                    |
            mkdir -p build && cd build                                                                &&
            cmake .. -G Ninja -DCMAKE_TOOLCHAIN_FILE=<< parameters.tool >> -DCMAKE_CXX_FLAGS="<< parameters.options >>" << parameters.setup >>&&
            ninja unit.arch.exe             -k 0 -j 8 && ctest -R "^unit.arch\..*\.exe"      -j 8     &&
            ninja unit.meta.exe             -k 0 -j 8 && ctest -R "^unit.meta\..*\.exe"      -j 8     &&
            ninja unit.internals.exe        -k 0 -j 8 && ctest -R "^unit.internals\..*\.exe" -j 8     &&
            ninja unit.api.exe              -k 0 -j 8 && ctest -R "^unit.api\..*\.exe"       -j 8     &&
            ninja unit.real.algorithm.exe   -k 0 -j 8 && ctest -R "^unit.real.algorithm\..*\simd.exe"

##==================================================================================================
## Jobs list
##==================================================================================================
jobs:
  ##================================================================================================
  ## ARM tests
  ##================================================================================================
  aarch64_gcc_128:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - AARCH64 128 bits Registers
          tool:     "../cmake/toolchain/gcc.aarch64.debug.cmake"
          options:  "-Wno-psabi -DEVE_NO_FORCEINLINE"

  aarch64_gcc_64:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - AARCH64 64 bits Registers
          tool:     "../cmake/toolchain/gcc.aarch64.debug.cmake"
          options:  "-Wno-psabi -DEVE_NO_FORCEINLINE"
          setup:    "-DEVE_TEST_TYPE=small_wide"

  ##================================================================================================
  ## X86 tests - SSE like
  ##================================================================================================
  x86_clang_sse2:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - SSE2
          tool:     "../cmake/toolchain/clang.x86.debug.cmake"
          options:  "-msse2 -DEVE_NO_FORCEINLINE"

  x86_clang_sse4:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - SSE4
          tool:     "../cmake/toolchain/clang.x86.debug.cmake"
          options:  "-msse4 -DEVE_NO_FORCEINLINE"

  x86_clang_emulation:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - SSE4
          tool:     "../cmake/toolchain/clang.x86.debug.cmake"
          options:  "-DEVE_NO_SIMD -DEVE_NO_FORCEINLINE"

  ##================================================================================================
  ## X86 tests - AVX like
  ##================================================================================================
  x86_clang_avx:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - AVX
          tool:     "../cmake/toolchain/clang.x86.debug.cmake"
          options:  "-mavx -DEVE_NO_FORCEINLINE"

  x86_clang_avx2:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - AVX2
          tool:     "../cmake/toolchain/clang.x86.debug.cmake"
          options:  "-mavx2 -DEVE_NO_FORCEINLINE"

  x86_clang_avx2_fma:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - AVX2 + FMA
          tool:     "../cmake/toolchain/clang.x86.debug.cmake"
          options:  "-mavx2 -mfma -DEVE_NO_FORCEINLINE"

  ##================================================================================================
  ## X86 tests - AVX512 like
  ##================================================================================================
  x86_clang_avx512:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test_avx512:
          desc: Running SIMD Tests - AVX512
          tool:    "../cmake/toolchain/clang.x86.debug.cmake"
          options: "-march=skylake-avx512 -DEVE_NO_FORCEINLINE"

  x86_clang_avx512_256:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test_avx512:
          desc: Running SIMD Tests - AVX512 - 256bits mode
          tool:     "../cmake/toolchain/clang.x86.debug.cmake"
          options:  "-march=skylake-avx512 -DEVE_NO_FORCEINLINE"
          setup:    "-DEVE_TEST_TYPE=small_wide"

  x86_clang_avx512_128:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test_avx512:
          desc: Running SIMD Tests - AVX512 - 128bits mode
          tool:     "../cmake/toolchain/clang.x86.debug.cmake"
          options:  "-march=skylake-avx512 -DEVE_NO_FORCEINLINE"
          setup:    "-DEVE_TEST_TYPE=smaller_wide"

  ##================================================================================================
  ## X86 tests - special size tests
  ##================================================================================================
  x86_clang_tiny:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - Tiny register
          tool:     "../cmake/toolchain/clang.x86.debug.cmake"
          options:  "-DEVE_NO_FORCEINLINE"
          setup:    "-DEVE_TEST_TYPE=tiny_wide"

  x86_clang_small:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - Small register
          tool:     "../cmake/toolchain/clang.x86.debug.cmake"
          options:  "-DEVE_NO_FORCEINLINE"
          setup:    "-DEVE_TEST_TYPE=small_wide"

  x86_clang_extra:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - Extra-large register
          tool:     "../cmake/toolchain/clang.x86.debug.cmake"
          options:  "-DEVE_NO_FORCEINLINE"
          setup:    "-DEVE_TEST_TYPE=extra_wide"

  ##================================================================================================
  ## X86 tests - Scalar tests
  ##================================================================================================
  x86_clang_scalar:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run:
          name: Run SCALAR Tests
          command:                                                                              |
            mkdir -p build && cd build                                                          &&
            cmake .. -G Ninja -DCMAKE_TOOLCHAIN_FILE="../cmake/toolchain/clang.x86.debug.cmake" &&
            ninja unit.scalar.exe -k 0 -j 8 && ctest -R "^unit\..*\..*\..*\.scalar.exe" -j 8

workflows:
  version: 2
  build_and_test:
    jobs:
      - aarch64_gcc_128:
          filters:
            branches:
              ignore: develop
      - aarch64_gcc_64:
          filters:
            branches:
              ignore: develop
      ######################
      - x86_clang_scalar:
          filters:
            branches:
              ignore: develop
      ######################
      - x86_clang_sse2:
          filters:
            branches:
              ignore: develop
      - x86_clang_sse4:
          filters:
            branches:
              ignore: develop
      - x86_clang_emulation:
          filters:
            branches:
              ignore: develop
      ######################
      - x86_clang_avx:
          filters:
            branches:
              ignore: develop
      - x86_clang_avx2:
          filters:
            branches:
              ignore: develop
      - x86_clang_avx2_fma:
          filters:
            branches:
              ignore: develop
      ######################
      - x86_clang_tiny:
          filters:
            branches:
              ignore: develop
      - x86_clang_small:
          filters:
            branches:
              ignore: develop
      - x86_clang_extra:
          filters:
            branches:
              ignore: develop
      ######################
      - x86_clang_avx512:
          filters:
            branches:
              ignore: develop
      - x86_clang_avx512_256:
          filters:
            branches:
              ignore: develop
      - x86_clang_avx512_128:
          filters:
            branches:
              ignore: develop
      ######################
