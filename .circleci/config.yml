##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright : EVE Contributors & Maintainers
##  SPDX-License-Identifier: MIT
##==================================================================================================
version: 2.1

##==================================================================================================
## Custom commands
##==================================================================================================
commands:
  configure_toolchain:
    description: "Configure tests from a CMake Toolchain"
    parameters:
      tool:
        type: string
      options:
        type: string
        default: ""
      setup:
        type: string
        default: ""
    steps:
      - run:
          name: Configuring toolchain << parameters.tool >>
          command:                                                                                    |
            mkdir -p build && cd build                                                                &&
            cmake .. -G Ninja -DCMAKE_TOOLCHAIN_FILE=<< parameters.tool >> -DEVE_OPTIONS="<< parameters.options >>" << parameters.setup >>

  compile:
    description: "Compile tests from a list of target"
    parameters:
      targets:
        type: string
      cpu:
        type: integer
        default: 8
    steps:
      - run:
          name: Compiling << parameters.targets >> at -j << parameters.cpu >>
          command:                                                                                    |
            cd build                                                                                  &&
            for i in `../cmake/toolchain/filter.sh << parameters.targets >> keys`; do ninja $i -j << parameters.cpu >> ; done;

  ctest:
    description: "Perform tests from a list of target"
    parameters:
      targets:
        type: string
    steps:
      - run:
          name: Run tests for << parameters.targets >>
          command:                                                                                    |
            cd build                                                                                  &&
            for i in `../cmake/toolchain/filter.sh << parameters.targets >> values`; do ctest -R $i -j 8 ; done;

##==================================================================================================
## Jobs setup
##==================================================================================================
base_jobs: &base_jobs
  docker:
    - image: jfalcou/compilers:latest
  parameters:
    tool:
      type: string
    options:
      type: string
      default: ""
    setup:
      type: string
      default: ""
  steps:
    - checkout
    - configure_toolchain:
        tool:     << parameters.tool >>
        options:  << parameters.options >>
        setup:    << parameters.setup >>
    - compile:
        targets: "../cmake/toolchain/arch.targets.json"
        cpu:  3
    - ctest:
        targets: "../cmake/toolchain/arch.targets.json"
    - compile:
        targets: "../cmake/toolchain/api.targets.json"
        cpu:  3
    - ctest:
        targets: "../cmake/toolchain/api.targets.json"
    - compile:
        targets: "../cmake/toolchain/doc.targets.json"
        cpu:  3
    - ctest:
        targets: "../cmake/toolchain/doc.targets.json"
    - run:
        name: Pre-compiling large math function
        command: cd build && ninja unit.real.math.heavy.exe  -k 0 -j 2
    - compile:
        targets: "../cmake/toolchain/simd.targets.json"
        cpu:  3
    - ctest:
        targets: "../cmake/toolchain/simd.targets.json"

wip_jobs: &wip_jobs
  docker:
    - image: jfalcou/compilers:latest
  parameters:
    tool:
      type: string
    options:
      type: string
      default: ""
    setup:
      type: string
      default: ""
  steps:
    - checkout
    - configure_toolchain:
        tool:     << parameters.tool >>
        options:  << parameters.options >>
        setup:    << parameters.setup >>
    - compile:
        targets: "../cmake/toolchain/arch.targets.json"
        cpu:  3
    - ctest:
        targets: "../cmake/toolchain/arch.targets.json"
    - compile:
        targets: "../cmake/toolchain/api.targets.json"
        cpu:  3
    - ctest:
        targets: "../cmake/toolchain/api.targets.json"

scalar_jobs: &scalar_jobs
  docker:
    - image: jfalcou/compilers:latest
  parameters:
    tool:
      type: string
    options:
      type: string
      default: ""
    setup:
      type: string
      default: ""
  steps:
    - checkout
    - configure_toolchain:
        tool:     << parameters.tool >>
        options:  << parameters.options >>
        setup:    << parameters.setup >>
    - compile:
        targets: "../cmake/toolchain/scalar.targets.json"
        cpu:  8
    - ctest:
        targets: "../cmake/toolchain/scalar.targets.json"

##==================================================================================================
## Jobs list
##==================================================================================================
jobs:
  aarch64_128:
    <<: *base_jobs
  aarch64_64:
    <<: *base_jobs
  arm_128:
    <<: *wip_jobs
  x86_sse2:
    <<: *base_jobs
  x86_sse4:
    <<: *base_jobs
  x86_avx:
    <<: *base_jobs
  x86_avx2:
    <<: *base_jobs
  x86_fma:
    <<: *base_jobs
  emulation:
    <<: *base_jobs
  x86_avx512:
    <<: *base_jobs
  tiny:
    <<: *base_jobs
  small:
    <<: *base_jobs
  extra:
    <<: *base_jobs
  scalar:
    <<: *scalar_jobs

##==================================================================================================
## Workflow & dependencies
##==================================================================================================
workflows:
  version: 2
  build_and_test:
    jobs:
    ##==============================================================================================
    ## AARCH64
    ##==============================================================================================
      - aarch64_128:
          tool:     "../cmake/toolchain/gcc.aarch64.cmake"
          options:  "-Wno-psabi"
          filters:
            branches:
              ignore: develop

      - aarch64_64:
          tool:     "../cmake/toolchain/gcc.aarch64.cmake"
          options:  "-Wno-psabi"
          setup:    "-DEVE_TEST_TYPE=small_wide"
          filters:
            branches:
              ignore: develop

    ##==============================================================================================
    ## X86 - 128 bits
    ##==============================================================================================
      - x86_sse2:
          tool:     "../cmake/toolchain/clang.x86.asan.cmake"
          options:  "-msse2"
          filters:
            branches:
              ignore: develop
      - x86_sse4:
          requires:
            - x86_sse2
          tool:     "../cmake/toolchain/clang.x86.cmake"
          options:  "-msse4.2"
          filters:
            branches:
              ignore: develop

    ##==============================================================================================
    ## X86 - 256 bits
    ##==============================================================================================
      - x86_avx:
          tool:     "../cmake/toolchain/clang.x86.cmake"
          options:  "-mavx"
          filters:
            branches:
              ignore: develop
      - x86_avx2:
          requires:
            - x86_avx
          tool:     "../cmake/toolchain/clang.x86.cmake"
          options:  "-mavx2"
          filters:
            branches:
              ignore: develop
      - x86_fma:
          requires:
            - x86_avx2
          tool:     "../cmake/toolchain/clang.x86.cmake"
          options:  "-mavx2 -mfma"
          filters:
            branches:
              ignore: develop

    ##==============================================================================================
    ## X86 - 512 bits
    ##==============================================================================================
      - x86_avx512:
          tool:     "../cmake/toolchain/clang.x86.cmake"
          options:  "-march=skylake-avx512"
          filters:
            branches:
              ignore: develop

    ##==============================================================================================
    ## ARM v7
    ##==============================================================================================
      - arm_128:
          requires:
            - x86_avx512
          tool:     "../cmake/toolchain/gcc.arm.cmake"
          filters:
            branches:
              ignore: develop

    ##==============================================================================================
    ## Extra size
    ##==============================================================================================
      - tiny:
          requires:
            - x86_sse4
          tool:     "../cmake/toolchain/clang.x86.cmake"
          setup:    "-DEVE_TEST_TYPE=tiny_wide"
          filters:
            branches:
              ignore: develop
      - small:
          requires:
            - aarch64_128
          tool:     "../cmake/toolchain/clang.x86.cmake"
          setup:    "-DEVE_TEST_TYPE=small_wide"
          filters:
            branches:
              ignore: develop
      - extra:
          requires:
            - small
          tool:     "../cmake/toolchain/clang.x86.cmake"
          setup:    "-DEVE_TEST_TYPE=extra_wide"
          filters:
            branches:
              ignore: develop

      - emulation:
          requires:
            - aarch64_64
          tool:     "../cmake/toolchain/clang.x86.cmake"
          options:  "-DEVE_NO_SIMD"
          filters:
            branches:
              ignore: develop

      - scalar:
          requires:
            - emulation
          tool:     "../cmake/toolchain/clang.x86.cmake"
          filters:
            branches:
              ignore: develop
