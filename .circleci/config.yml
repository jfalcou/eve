##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright 2018-2021 Joel FALCOU
##  Copyright 2018-2021 Jean-Thierry LAPRESTE
##
##  Licensed under the MIT License <http://opensource.org/licenses/MIT>.
##  SPDX-License-Identifier: MIT
##==================================================================================================
version: 2.1

##==================================================================================================
## Custom commands
##==================================================================================================
commands:
  run_test:
    description: "Configure and run tests from a CMake Toolchain"
    parameters:
      desc:
        type: string
      tool:
        type: string
      options:
        type: string
        default: ""
    steps:
      - run:
          name: << parameters.desc >>
          command:                                                                                    |
            mkdir -p build && cd build                                                                &&
            cmake .. -G Ninja -DCMAKE_TOOLCHAIN_FILE=<< parameters.tool >> -DCMAKE_CXX_FLAGS=<< parameters.options >> &&
            ninja unit.real.math.heavy.exe  -k 0 -j 2                                                 &&
            ninja unit.arch.exe             -k 0      && ctest -R "^unit.arch\..*\.exe"               &&
            ninja unit.meta.exe             -k 0 -j 8 && ctest -R "^unit.meta\..*\.exe"               &&
            ninja unit.internals.exe        -k 0 -j 8 && ctest -R "^unit.internals\..*\.exe"    -j 8  &&
            ninja unit.api.exe              -k 0 -j 8 && ctest -R "^unit.api\..*\.exe"          -j 8  &&
            ninja doc.exe                   -k 0 -j 8 && ctest -R "^doc\..*\.exe"               -j 8  &&
            ninja unit.simd.exe             -k 0 -j 6 && ctest -R "^unit\..*\..*\..*\.simd.exe" -j 8

##==================================================================================================
## Jobs list
##==================================================================================================
jobs:
  ##================================================================================================
  ## ARM tests
  ##================================================================================================
  aarch64_clang_128:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - AARCH64 128 bits Registers
          tool: "../cmake/toolchain/clang.aarch64.debug.cmake"
          options: "-Wno-psabi -DEVE_NO_FORCEINLINE -DEVE_TEST_TYPE=small_wide"

  aarch64_clang_64:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - AARCH64 64 bits Registers
          tool: "../cmake/toolchain/clang.aarch64.debug.cmake"
          options: "-Wno-psabi -DEVE_NO_FORCEINLINE"

  ##================================================================================================
  ## X86 tests - SSE like
  ##================================================================================================
  x86_clang_sse2:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - SSE2
          tool: "../cmake/toolchain/clang.x86.debug.cmake"
          options: "-msse2 -DEVE_NO_FORCEINLINE"

  x86_clang_sse4:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - SSE4
          tool: "../cmake/toolchain/clang.x86.debug.cmake"
          options: "-msse4 -DEVE_NO_FORCEINLINE"

  x86_clang_emulation:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - SSE4
          tool: "../cmake/toolchain/clang.x86.debug.cmake"
          options: "-DEVE_NO_SIMD -DEVE_NO_FORCEINLINE"

  ##================================================================================================
  ## X86 tests - AVX like
  ##================================================================================================
  x86_clang_avx:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - AVX
          tool: "../cmake/toolchain/clang.x86.debug.cmake"
          options: "-mavx -DEVE_NO_FORCEINLINE"

  x86_clang_avx2:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - AVX2
          tool: "../cmake/toolchain/clang.x86.debug.cmake"
          options: "-mavx2 -DEVE_NO_FORCEINLINE"

  x86_clang_avx2_fma:
    docker:
      - image: jfalcou/compilers:latest
    steps:
      - checkout
      - run_test:
          desc: Running SIMD Tests - SSE4
          tool: "../cmake/toolchain/clang.x86.debug.cmake"
          options: "-mavx2 -mfma -DEVE_NO_FORCEINLINE"

  # x86_scalar:
  #   <<: *config_clang_x86
  #   steps:
  #     - checkout
  #     - run:
  #         name: Running Scalar Tests
  #         command: VARIANT="scalar" OPTIONS="" . ./.circleci/perform_scalar.sh

  # x86_avx512:
  #   <<: *config_gcc_x86
  #   steps:
  #     - checkout
  #     - run:
  #         name: Running SIMD Tests - AVX512
  #         command: VARIANT="avx512" OPTIONS="-march=skylake-avx512" . ./.circleci/perform.sh

  # x86_avx512_256:
  #   <<: *config_gcc_x86
  #   steps:
  #     - checkout
  #     - run:
  #         name: Running SIMD Tests - AVX2 with AVX512
  #         command: VARIANT="avx512" OPTIONS="-march=skylake-avx512" CMAKE_OPTIONS="-DEVE_TEST_TYPE=small_wide" . ./.circleci/perform.sh

  # x86_avx512_128:
  #   <<: *config_gcc_x86
  #   steps:
  #     - checkout
  #     - run:
  #         name: Running SIMD Tests - SSE4 with AVX512
  #         command: VARIANT="avx512"  OPTIONS="-march=skylake-avx512" CMAKE_OPTIONS="-DEVE_TEST_TYPE=smaller_wide" . ./.circleci/perform.sh

  # x86_tiny:
  #   <<: *config_clang_x86
  #   steps:
  #     - checkout
  #     - run:
  #         name: Running SIMD Tests - Tiny Wide
  #         command: CMAKE_OPTIONS="-DEVE_TEST_TYPE=tiny_wide" VARIANT="tiny" OPTIONS="" . ./.circleci/perform.sh

  # x86_extra:
  #   <<: *config_clang_x86
  #   steps:
  #     - checkout
  #     - run:
  #         name: Running SIMD Tests - Extra-large Wide
  #         command: CMAKE_OPTIONS="-DEVE_TEST_TYPE=extra_wide" VARIANT="extra" OPTIONS="" . ./.circleci/perform.sh

  # x86_half:
  #   <<: *config_clang_x86
  #   steps:
  #     - checkout
  #     - run:
  #         name: Running SIMD Tests - Half_size Wide
  #         command: CMAKE_OPTIONS="-DEVE_TEST_TYPE=small_wide" VARIANT="half" OPTIONS="" . ./.circleci/perform.sh

workflows:
  version: 2
  build_and_test:
    jobs:
      - aarch64_clang_128
      - aarch64_clang_64
      - x86_clang_sse2
      - x86_clang_sse4
      - x86_clang_emulation
      - x86_clang_avx
      - x86_clang_avx2
      - x86_clang_avx2_fma
