##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright 2018-2021 Joel FALCOU
##  Copyright 2018-2021 Jean-Thierry LAPRESTE
##
##  Licensed under the MIT License <http://opensource.org/licenses/MIT>.
##  SPDX-License-Identifier: MIT
##==================================================================================================
version: 2.1

##==================================================================================================
## Custom commands
##==================================================================================================
commands:
  configure_toolchain:
    description: "Configure tests from a CMake Toolchain"
    parameters:
      tool:
        type: string
      options:
        type: string
        default: ""
      setup:
        type: string
        default: ""
    steps:
      - run:
          name: Configuring toolchain << parameters.tool >>
          command:                                                                                    |
            mkdir -p build && cd build                                                                &&
            cmake .. -G Ninja -DCMAKE_TOOLCHAIN_FILE=<< parameters.tool >> -DEVE_OPTIONS="<< parameters.options >>" << parameters.setup >>

  compile:
    description: "Compile tests from a list of target"
    parameters:
      targets:
        type: string
      cpu:
        type: integer
        default: 8
    steps:
      - run:
          name: Compiling << parameters.targets >> at -j << parameters.cpu >>
          command:                                                                                    |
            cd build                                                                                  &&
            for i in `../cmake/toolchain/filter.sh << parameters.targets >> keys`; do ninja $i -j << parameters.cpu >> ; done;

  ctest:
    description: "Perform tests from a list of target"
    parameters:
      targets:
        type: string
    steps:
      - run:
          name: Run tests for << parameters.targets >>
          command:                                                                                    |
            cd build                                                                                  &&
            for i in `../cmake/toolchain/filter.sh << parameters.targets >> values`; do ctest -R $i -j 8 ; done;

  # run_test_avx512:
  #   description: "Configure and run tests from a CMake Toolchain"
  #   parameters:
  #     desc:
  #       type: string
  #     tool:
  #       type: string
  #     options:
  #       type: string
  #       default: ""
  #     setup:
  #       type: string
  #       default: ""
  #   steps:
  #     - run:
  #         name: << parameters.desc >>
  #         command:                                                                                    |
  #           mkdir -p build && cd build                                                                &&
  #           cmake .. -G Ninja -DCMAKE_TOOLCHAIN_FILE=<< parameters.tool >> -DEVE_OPTIONS="<< parameters.options >>" << parameters.setup >>&&
  #           ninja unit.arch.exe             -k 0 -j 8 && ctest -R "^unit.arch\..*\.exe"      -j 8     &&
  #           ninja unit.meta.exe             -k 0 -j 8 && ctest -R "^unit.meta\..*\.exe"      -j 8     &&
  #           ninja unit.internals.exe        -k 0 -j 8 && ctest -R "^unit.internals\..*\.exe" -j 8     &&
  #           ninja unit.api.exe              -k 0 -j 8 && ctest -R "^unit.api\..*\.exe"       -j 8     &&
  #           ninja unit.real.algorithm.exe   -k 0 -j 8 && ctest -R "^unit.real.algorithm\..*\simd.exe"

##==================================================================================================
## Jobs list
##==================================================================================================
jobs:
  ##================================================================================================
  ## Regular tests
  ##================================================================================================
  complete_tests:
    docker:
      - image: jfalcou/compilers:latest
    parameters:
      tool:
        type: string
      options:
        type: string
      setup:
        type: string
        default: ""
      desc:
        type: string
    steps:
      - checkout
      - run:
          name: << parameters.desc >>
      - configure_toolchain:
          tool:     << parameters.tool >>
          options:  << parameters.options >>
          setup:    << parameters.setup >>
      - compile:
          targets: "../cmake/toolchain/arch.targets.json"
          cpu:  8
      - ctest:
          targets: "../cmake/toolchain/arch.targets.json"
      - compile:
          targets: "../cmake/toolchain/doc.targets.json"
          cpu:  8
      - ctest:
          targets: "../cmake/toolchain/doc.targets.json"
      - run:
          name: Pre-compiling large math function
          command: cd build && ninja unit.real.math.heavy.exe  -k 0 -j 2
      - compile:
          targets: "../cmake/toolchain/simd.targets.json"
          cpu:  8
      - ctest:
          targets: "../cmake/toolchain/simd.targets.json"


  # aarch64_gcc_64:
  #   docker:
  #     - image: jfalcou/compilers:latest
  #   steps:
  #     - checkout
  #     - run_test:
  #         desc: Running SIMD Tests - AARCH64 64 bits Registers
  #         tool:     "../cmake/toolchain/gcc.aarch64.cmake"
  #         options:  "-Wno-psabi"
  #         setup:

  # ##================================================================================================
  # ## X86 tests - SSE like
  # ##================================================================================================
  # x86_clang_sse2:
  #   docker:
  #     - image: jfalcou/compilers:latest
  #   steps:
  #     - checkout
  #     - run_test:
  #         desc: Running SIMD Tests - SSE2
  #         tool:     "../cmake/toolchain/clang.x86.cmake"
  #         options:  "-msse2"

  # x86_clang_sse4:
  #   docker:
  #     - image: jfalcou/compilers:latest
  #   steps:
  #     - checkout
  #     - run_test:
  #         desc: Running SIMD Tests - SSE4
  #         tool:     "../cmake/toolchain/clang.x86.cmake"
  #         options:  "-msse4"

  # x86_clang_emulation:
  #   docker:
  #     - image: jfalcou/compilers:latest
  #   steps:
  #     - checkout
  #     - run_test:
  #         desc: Running SIMD Tests - SSE4
  #         tool:     "../cmake/toolchain/clang.x86.cmake"
  #         options:  "-DEVE_NO_SIMD"

  # ##================================================================================================
  # ## X86 tests - AVX like
  # ##================================================================================================
  # x86_clang_avx:
  #   docker:
  #     - image: jfalcou/compilers:latest
  #   steps:
  #     - checkout
  #     - run_test:
  #         desc: Running SIMD Tests - AVX
  #         tool:     "../cmake/toolchain/clang.x86.cmake"
  #         options:  "-mavx"

  # x86_clang_avx2:
  #   docker:
  #     - image: jfalcou/compilers:latest
  #   steps:
  #     - checkout
  #     - run_test:
  #         desc: Running SIMD Tests - AVX2
  #         tool:     "../cmake/toolchain/clang.x86.cmake"
  #         options:  "-mavx2"

  # x86_clang_avx2_fma:
  #   docker:
  #     - image: jfalcou/compilers:latest
  #   steps:
  #     - checkout
  #     - run_test:
  #         desc: Running SIMD Tests - AVX2 + FMA
  #         tool:     "../cmake/toolchain/clang.x86.cmake"
  #         options:  "-mavx2 -mfma"

  # ##================================================================================================
  # ## X86 tests - AVX512 like
  # ##================================================================================================
  # x86_clang_avx512:
  #   docker:
  #     - image: jfalcou/compilers:latest
  #   steps:
  #     - checkout
  #     - run_test_avx512:
  #         desc: Running SIMD Tests - AVX512
  #         tool:    "../cmake/toolchain/clang.x86.cmake"
  #         options: "-march=skylake-avx512"

  # x86_clang_avx512_256:
  #   docker:
  #     - image: jfalcou/compilers:latest
  #   steps:
  #     - checkout
  #     - run_test_avx512:
  #         desc: Running SIMD Tests - AVX512 - 256bits mode
  #         tool:     "../cmake/toolchain/clang.x86.cmake"
  #         options:  "-march=skylake-avx512"
  #         setup:    "-DEVE_TEST_TYPE=small_wide"

  # x86_clang_avx512_128:
  #   docker:
  #     - image: jfalcou/compilers:latest
  #   steps:
  #     - checkout
  #     - run_test_avx512:
  #         desc: Running SIMD Tests - AVX512 - 128bits mode
  #         tool:     "../cmake/toolchain/clang.x86.cmake"
  #         options:  "-march=skylake-avx512"
  #         setup:    "-DEVE_TEST_TYPE=smaller_wide"

  # ##================================================================================================
  # ## X86 tests - special size tests
  # ##================================================================================================
  # x86_clang_tiny:
  #   docker:
  #     - image: jfalcou/compilers:latest
  #   steps:
  #     - checkout
  #     - run_test:
  #         desc: Running SIMD Tests - Tiny register
  #         tool:     "../cmake/toolchain/clang.x86.cmake"
  #         options:  "
  #         setup:    "-DEVE_TEST_TYPE=tiny_wide"

  # x86_clang_small:
  #   docker:
  #     - image: jfalcou/compilers:latest
  #   steps:
  #     - checkout
  #     - run_test:
  #         desc: Running SIMD Tests - Small register
  #         tool:     "../cmake/toolchain/clang.x86.cmake"
  #         options:  "
  #         setup:    "-DEVE_TEST_TYPE=small_wide"

  # x86_clang_extra:
  #   docker:
  #     - image: jfalcou/compilers:latest
  #   steps:
  #     - checkout
  #     - run_test:
  #         desc: Running SIMD Tests - Extra-large register
  #         tool:     "../cmake/toolchain/clang.x86.cmake"
  #         options:  "
  #         setup:    "-DEVE_TEST_TYPE=extra_wide"

  # ##================================================================================================
  # ## X86 tests - Scalar tests
  # ##================================================================================================
  # x86_clang_scalar:
  #   docker:
  #     - image: jfalcou/compilers:latest
  #   steps:
  #     - checkout
  #     - run:
  #         name: Run SCALAR Tests
  #         command:                                                                              |
  #           mkdir -p build && cd build                                                          &&
  #           cmake .. -G Ninja -DCMAKE_TOOLCHAIN_FILE="../cmake/toolchain/clang.x86.cmake" &&
  #           ninja unit.scalar.exe -k 0 -j 8 && ctest -R "^unit\..*\..*\..*\.scalar.exe" -j 8

workflows:
  version: 2
  build_and_test:
    jobs:
      - complete_tests:
          tool:     "../cmake/toolchain/gcc.aarch64.cmake"
          options:  "-Wno-psabi"
          desc:     "AARCH64 - 128 bits registers"
          filters:
            branches:
              ignore: develop
      - complete_tests:
          tool:     "../cmake/toolchain/gcc.aarch64.cmake"
          options:  "-Wno-psabi"
          desc:     "AARCH64 - 64 bits registers"
          setup:    "-DEVE_TEST_TYPE=small_wide"
          filters:
            branches:
              ignore: develop

      # - aarch64_gcc_64:
      #     filters:
      #       branches:
      #         ignore: develop
      # - x86_clang_scalar:
      #     requires:
      #       - aarch64_gcc_64
      #     filters:
      #       branches:
      #         ignore: develop
      # ######################
      # - x86_clang_sse2:
      #     filters:
      #       branches:
      #         ignore: develop
      # - x86_clang_sse4:
      #     requires:
      #       - x86_clang_sse2
      #     filters:
      #       branches:
      #         ignore: develop
      # - x86_clang_emulation:
      #     requires:
      #       - x86_clang_sse4
      #     filters:
      #       branches:
      #         ignore: develop
      # ######################
      # - x86_clang_avx:
      #     filters:
      #       branches:
      #         ignore: develop
      # - x86_clang_avx2:
      #     requires:
      #       - x86_clang_avx
      #     filters:
      #       branches:
      #         ignore: develop
      # - x86_clang_avx2_fma:
      #     requires:
      #       - x86_clang_avx2
      #     filters:
      #       branches:
      #         ignore: develop
      # ######################
      # - x86_clang_tiny:
      #     filters:
      #       branches:
      #         ignore: develop
      # - x86_clang_small:
      #     requires:
      #       - x86_clang_tiny
      #     filters:
      #       branches:
      #         ignore: develop
      # - x86_clang_extra:
      #     requires:
      #       - x86_clang_small
      #     filters:
      #       branches:
      #         ignore: develop
      # ######################
      # - x86_clang_avx512:
      #     filters:
      #       branches:
      #         ignore: develop
      # - x86_clang_avx512_256:
      #     requires:
      #       - x86_clang_avx512
      #     filters:
      #       branches:
      #         ignore: develop
      # - x86_clang_avx512_128:
      #     requires:
      #       - x86_clang_avx512_256
      #     filters:
      #       branches:
      #         ignore: develop
      # ######################
