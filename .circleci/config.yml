##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright 2019 Joel FALCOU
##  Copyright 2019 Jean-Thierry LAPRESTE
##
##  Licensed under the MIT License <http://opensource.org/licenses/MIT>.
##  SPDX-License-Identifier: MIT
##==================================================================================================
version: 2.1

##==================================================================================================
## Docker images
##==================================================================================================
docker_gcc: &docker_gcc
  docker:
    - image: gcc:latest
      environment:
        COMPILER: g++
docker_clang: &docker_clang
  docker:
    - image: teeks99/clang-ubuntu:8
      environment:
        COMPILER: clang++-8
docker_ppc64: &docker_ppc64
  docker:
    - image: ubuntu:latest
      environment:
        COMPILER_PACKAGE: g++-8-powerpc64-linux-gnu
        COMPILER: powerpc64-linux-gnu-g++-8
        RUN_COMMAND: qemu-ppc64
        EXTRA_PATH: /usr/powerpc64-linux-gnu/lib/
        EXTRA_LIB: lib64
        EXTRA_NAME: ld64.so.1
docker_arm: &docker_arm
  docker:
    - image: ubuntu:latest
      environment:
        COMPILER_PACKAGE: g++-8-arm-linux-gnueabihf
        COMPILER: arm-linux-gnueabihf-g++-8
        RUN_COMMAND: qemu-arm
        EXTRA_PATH: /usr/arm-linux-gnueabihf/lib
        EXTRA_LIB: lib
        EXTRA_NAME: ld-linux-armhf.so.3
docker_aarch64: &docker_aarch64
  docker:
    - image: ubuntu:latest
      environment:
        COMPILER_PACKAGE: g++-8-aarch64-linux-gnu
        COMPILER: aarch64-linux-gnu-g++-8
        RUN_COMMAND: qemu-aarch64
        EXTRA_PATH: /usr/aarch64-linux-gnu/lib/
        EXTRA_LIB: lib
        EXTRA_NAME: ld-linux-aarch64.so.1

##==================================================================================================
## Build configurations
##==================================================================================================
config_gcc_sse2: &config_gcc_sse2
  <<: *docker_gcc
config_gcc_sse4: &config_gcc_sse4
  <<: *docker_gcc
config_gcc_avx: &config_gcc_avx
  <<: *docker_gcc
config_gcc_avx2: &config_gcc_avx2
  <<: *docker_gcc
config_clang_avx2: &config_clang_avx2
  <<: *docker_clang
config_gcc_ppc64: &config_gcc_ppc64
  <<: *docker_ppc64
config_gcc_arm: &config_gcc_arm
 <<: *docker_arm
config_gcc_aarch64: &config_gcc_aarch64
 <<: *docker_aarch64

##==================================================================================================
## Build steps
##==================================================================================================
steps_test_gcc: &steps_test_gcc
  steps:
    - checkout
    - run:
        name: Setup dependencies
        command: . .circleci/prepare.sh
    - run:
        name: Running tests
        command: . .circleci/run.sh

steps_test_clang_: &steps_test_clang_
  steps:
    - checkout
    - run:
        name: Setup dependencies
        command: . .circleci/prepare.sh
    - run:
        name: Running tests
        command: . .circleci/run.sh clang++-8

steps_test_ppc64: &steps_test_ppc64
  steps:
    - checkout
    - run:
        name: Setup dependencies
        command: . .circleci/prepare.sh
    - run:
        name: Setup PowerPC 64
        command: . .circleci/prepare_cc.sh
    - run:
        name: Running tests
        command: . .circleci/run.sh

steps_test_neon: &steps_test_neon
  steps:
    - checkout
    - run:
        name: Setup dependencies
        command: . .circleci/prepare.sh
    - run:
        name: Setup ARM
        command: . .circleci/prepare_cc.sh
    - run:
        name: Running tests
        command: . .circleci/run.sh

steps_test_aarch64: &steps_test_aarch64
  steps:
    - checkout
    - run:
        name: Setup dependencies
        command: . .circleci/prepare.sh
    - run:
        name: Setup AARCH64
        command: . .circleci/prepare_cc.sh
    - run:
        name: Running tests
        command: . .circleci/run.sh

##==================================================================================================
## Jobs list
##==================================================================================================
jobs:
  ##================================================================================================
  ## Synchronization jobs
  ##================================================================================================
  sync_arch:
    <<: *docker_gcc
    steps:
      - run: echo "Test arch.unit completed"
  sync_api:
    <<: *docker_gcc
    steps:
      - run: echo "Test api.unit completed"
  sync_doc:
    <<: *docker_gcc
    steps:
      - run: echo "Test doc.unit completed"
  sync_scalar:
    <<: *docker_gcc
    steps:
      - run: echo "Test core.scalar.unit completed"

  ##================================================================================================
  ## Arch tests
  ##================================================================================================
  gcc_sse2_arch:
    <<: *config_gcc_sse2
    environment:
      TARGET: arch
      REPLICATION: 8
      OPTIONS: "-msse2"
    <<: *steps_test_gcc
  gcc_sse4_arch:
    <<: *config_gcc_sse4
    environment:
      TARGET: arch
      REPLICATION: 8
      OPTIONS: "-msse4.2"
    <<: *steps_test_gcc
  gcc_avx_arch:
    <<: *config_gcc_avx
    environment:
      TARGET: arch
      REPLICATION: 8
      OPTIONS: "-mavx"
    <<: *steps_test_gcc
  gcc_fma3_arch:
    <<: *config_gcc_avx
    environment:
      TARGET: arch
      REPLICATION: 8
      OPTIONS: "-mavx -mfma"
    <<: *steps_test_gcc
  gcc_avx2_arch:
    <<: *config_gcc_avx2
    environment:
      TARGET: arch
      REPLICATION: 8
      OPTIONS: "-mavx2"
    <<: *steps_test_gcc
  clang_avx2_arch:
    <<: *config_clang_avx2
    environment:
      TARGET: arch
      REPLICATION: 8
      OPTIONS: "-mavx2"
    <<: *steps_test_clang_
  arm_neon_arch:
    <<: *config_gcc_arm
    environment:
      TARGET: arch
      REPLICATION: 8
      OPTIONS: "-mfpu=neon -Wno-psabi"
    <<: *steps_test_neon
  arm_aarch64_arch:
    <<: *config_gcc_aarch64
    environment:
      TARGET: arch
      REPLICATION: 8
      OPTIONS: "-Wno-psabi"
    <<: *steps_test_aarch64
  ppc_vsx_arch:
    <<: *config_gcc_ppc64
    environment:
      TARGET: arch
      REPLICATION: 8
      OPTIONS: "-mvsx -mpower8-vector"
    <<: *steps_test_ppc64

  ##================================================================================================
  ## API tests
  ##================================================================================================
  gcc_sse2_api:
    <<: *config_gcc_sse2
    environment:
      TARGET: api
      REPLICATION: 8
      OPTIONS: "-msse2"
    <<: *steps_test_gcc
  gcc_sse4_api:
    <<: *config_gcc_sse4
    environment:
      TARGET: api
      REPLICATION: 8
      OPTIONS: "-msse4.2"
    <<: *steps_test_gcc
  gcc_avx_api:
    <<: *config_gcc_avx
    environment:
      TARGET: api
      REPLICATION: 8
      OPTIONS: "-mavx"
    <<: *steps_test_gcc
  gcc_fma3_api:
    <<: *config_gcc_avx
    environment:
      TARGET: api
      REPLICATION: 8
      OPTIONS: "-mavx -mfma"
    <<: *steps_test_gcc
  gcc_avx2_api:
    <<: *config_gcc_avx2
    environment:
      TARGET: api
      REPLICATION: 8
      OPTIONS: "-mavx2"
    <<: *steps_test_gcc
  clang_avx2_api:
    <<: *config_clang_avx2
    environment:
      TARGET: api
      OPTIONS: "-mavx2"
      REPLICATION: 8
    <<: *steps_test_clang_
  arm_neon_api:
    <<: *config_gcc_arm
    environment:
      TARGET: api
      REPLICATION: 8
      OPTIONS: "-mfpu=neon -Wno-psabi"
    <<: *steps_test_neon
  arm_aarch64_api:
    <<: *config_gcc_aarch64
    environment:
      TARGET: api
      REPLICATION: 8
      OPTIONS: "-Wno-psabi"
    <<: *steps_test_aarch64
  ppc_vsx_api:
    <<: *config_gcc_ppc64
    environment:
      TARGET: api
      REPLICATION: 8
      OPTIONS: "-mvsx -mpower8-vector"
    <<: *steps_test_ppc64

  ##================================================================================================
  ## Doc tests
  ##================================================================================================
  gcc_sse2_doc:
    <<: *config_gcc_sse2
    environment:
      TARGET: doc
      REPLICATION: 8
      OPTIONS: "-msse2"
    <<: *steps_test_gcc
  gcc_sse4_doc:
    <<: *config_gcc_sse4
    environment:
      TARGET: doc
      REPLICATION: 8
      OPTIONS: "-msse4.2"
    <<: *steps_test_gcc
  gcc_avx_doc:
    <<: *config_gcc_avx
    environment:
      TARGET: doc
      REPLICATION: 8
      OPTIONS: "-mavx"
    <<: *steps_test_gcc
  gcc_fma3_doc:
    <<: *config_gcc_avx
    environment:
      TARGET: doc
      REPLICATION: 8
      OPTIONS: "-mavx -mfma"
    <<: *steps_test_gcc
  gcc_avx2_doc:
    <<: *config_gcc_avx2
    environment:
      TARGET: doc
      REPLICATION: 8
      OPTIONS: "-mavx2"
    <<: *steps_test_gcc
  clang_avx2_doc:
    <<: *config_clang_avx2
    environment:
      TARGET: doc
      REPLICATION: 8
      OPTIONS: "-mavx2"
    <<: *steps_test_clang_
  arm_neon_doc:
    <<: *config_gcc_arm
    environment:
      TARGET: doc
      REPLICATION: 8
      OPTIONS: "-mfpu=neon -Wno-psabi"
    <<: *steps_test_neon
  arm_aarch64_doc:
    <<: *config_gcc_aarch64
    environment:
      TARGET: doc
      REPLICATION: 8
      OPTIONS: "-Wno-psabi"
    <<: *steps_test_aarch64
  ppc_vsx_doc:
    <<: *config_gcc_ppc64
    environment:
      TARGET: doc
      REPLICATION: 8
      OPTIONS: "-mvsx -mpower8-vector"
    <<: *steps_test_ppc64

  ##================================================================================================
  ## Scalar tests
  ##================================================================================================
  gcc_sse2_scalar:
    <<: *config_gcc_sse2
    environment:
      TARGET: core.scalar
      REPLICATION: 8
      OPTIONS: "-msse2"
    <<: *steps_test_gcc
  gcc_sse4_scalar:
    <<: *config_gcc_sse4
    environment:
      TARGET: core.scalar
      REPLICATION: 8
      OPTIONS: "-msse4.2"
    <<: *steps_test_gcc
  gcc_avx_scalar:
    <<: *config_gcc_avx
    environment:
      TARGET: core.scalar
      REPLICATION: 8
      OPTIONS: "-mavx"
    <<: *steps_test_gcc
  gcc_fma3_scalar:
    <<: *config_gcc_avx
    environment:
      TARGET: core.scalar
      REPLICATION: 8
      OPTIONS: "-mavx -mfma"
    <<: *steps_test_gcc
  gcc_avx2_scalar:
    <<: *config_gcc_avx2
    environment:
      TARGET: core.scalar
      REPLICATION: 8
      OPTIONS: "-mavx2"
    <<: *steps_test_gcc
  clang_avx2_scalar:
    <<: *config_clang_avx2
    environment:
      TARGET: core.scalar
      REPLICATION: 8
      OPTIONS: "-mavx2"
    <<: *steps_test_clang_
  arm_neon_scalar:
    <<: *config_gcc_arm
    environment:
      TARGET: core.scalar
      REPLICATION: 8
      OPTIONS: "-mfpu=neon -Wno-psabi"
    <<: *steps_test_neon
  arm_aarch64_scalar:
    <<: *config_gcc_aarch64
    environment:
      TARGET: core.scalar
      REPLICATION: 8
      OPTIONS: "-Wno-psabi"
    <<: *steps_test_aarch64
  ppc_vsx_scalar:
    <<: *config_gcc_ppc64
    environment:
      TARGET: core.scalar
      REPLICATION: 8
      OPTIONS: "-mvsx -mpower8-vector"
    <<: *steps_test_ppc64

  ##================================================================================================
  ## SIMD tests
  ##================================================================================================
  gcc_sse2_simd:
    <<: *config_gcc_sse2
    environment:
      TARGET: core.simd
      REPLICATION: 2
      OPTIONS: "-msse2"
    <<: *steps_test_gcc
  gcc_sse4_simd:
    <<: *config_gcc_sse4
    environment:
      TARGET: core.simd
      REPLICATION: 2
      OPTIONS: "-msse4.2"
    <<: *steps_test_gcc
  gcc_avx_simd:
    <<: *config_gcc_avx
    environment:
      TARGET: core.simd
      REPLICATION: 2
      OPTIONS: "-mavx"
    <<: *steps_test_gcc
  gcc_fma3_simd:
    <<: *config_gcc_avx
    environment:
      TARGET: core.simd
      REPLICATION: 2
      OPTIONS: "-mavx -mfma"
    <<: *steps_test_gcc
  gcc_avx2_simd:
    <<: *config_gcc_avx2
    environment:
      TARGET: core.simd
      REPLICATION: 2
      OPTIONS: "-mavx2"
    <<: *steps_test_gcc
  clang_avx2_simd:
    <<: *config_clang_avx2
    environment:
      TARGET: core.simd
      REPLICATION: 2
      OPTIONS: "-mavx2"
    <<: *steps_test_clang_
  arm_neon_simd:
    <<: *config_gcc_arm
    environment:
      TARGET: core.simd
      REPLICATION: 2
      OPTIONS: "-mfpu=neon -Wno-psabi"
    <<: *steps_test_neon
  arm_aarch64_simd:
    <<: *config_gcc_aarch64
    environment:
      TARGET: core.simd
      REPLICATION: 2
      OPTIONS: "-Wno-psabi"
    <<: *steps_test_aarch64
  ppc_vsx_simd:
    <<: *config_gcc_ppc64
    environment:
      TARGET: core.simd
      REPLICATION: 2
      OPTIONS: "-mvsx -mpower8-vector"
    <<: *steps_test_ppc64

workflows:
  version: 2
  build_and_test:
    jobs:
    ##==============================================================================================
    ## All architecture tests in parallel
    ##==============================================================================================
      - arm_aarch64_arch
      - arm_neon_arch
      - ppc_vsx_arch
      - gcc_sse2_arch
      - gcc_sse4_arch
      - gcc_avx_arch
      - gcc_fma3_arch
      - gcc_avx2_arch
      - clang_avx2_arch
      - sync_arch:
          requires:
            - arm_aarch64_arch
            - arm_neon_arch
            - ppc_vsx_arch
            - gcc_sse2_arch
            - gcc_sse4_arch
            - gcc_avx_arch
            - gcc_fma3_arch
            - gcc_avx2_arch
            - clang_avx2_arch

    ##==============================================================================================
    ## All API tests in parallel
    ##==============================================================================================
      - arm_aarch64_api:
          requires:
            - sync_arch
      - arm_neon_api:
          requires:
            - sync_arch
      - ppc_vsx_api:
          requires:
            - sync_arch
      - gcc_sse2_api:
          requires:
            - sync_arch
      - gcc_sse4_api:
          requires:
            - sync_arch
      - gcc_avx_api:
          requires:
            - sync_arch
      - gcc_fma3_api:
          requires:
            - sync_arch
      - gcc_avx2_api:
          requires:
            - sync_arch
      - clang_avx2_api:
          requires:
            - sync_arch
      - sync_api:
          requires:
            - arm_aarch64_api
            - arm_neon_api
            - ppc_vsx_api
            - gcc_sse2_api
            - gcc_sse4_api
            - gcc_avx_api
            - gcc_fma3_api
            - gcc_avx2_api
            - clang_avx2_api

    ##==============================================================================================
    ## All Doc tests in parallel
    ##==============================================================================================
      - arm_aarch64_doc:
          requires:
            - sync_api
      - arm_neon_doc:
          requires:
            - sync_api
      - ppc_vsx_doc:
          requires:
            - sync_api
      - gcc_sse2_doc:
          requires:
            - sync_api
      - gcc_sse4_doc:
          requires:
            - sync_api
      - gcc_avx_doc:
          requires:
            - sync_api
      - gcc_fma3_doc:
          requires:
            - sync_api
      - gcc_avx2_doc:
          requires:
            - sync_api
      - clang_avx2_doc:
          requires:
            - sync_api
      - sync_doc:
          requires:
            - arm_aarch64_doc
            - arm_neon_doc
            - ppc_vsx_doc
            - gcc_sse2_doc
            - gcc_sse4_doc
            - gcc_avx_doc
            - gcc_fma3_doc
            - gcc_avx2_doc
            - clang_avx2_doc

    ##==============================================================================================
    ## All Scalar tests in parallel
    ##==============================================================================================
      - arm_aarch64_scalar:
          requires:
            - sync_doc
      - arm_neon_scalar:
          requires:
            - sync_doc
      - ppc_vsx_scalar:
          requires:
            - sync_doc
      - gcc_sse2_scalar:
          requires:
            - sync_doc
      - gcc_sse4_scalar:
          requires:
            - sync_doc
      - gcc_avx_scalar:
          requires:
            - sync_doc
      - gcc_fma3_scalar:
          requires:
            - sync_doc
      - gcc_avx2_scalar:
          requires:
            - sync_doc
      - clang_avx2_scalar:
          requires:
            - sync_doc
      - sync_scalar:
          requires:
            - arm_aarch64_scalar
            - arm_neon_scalar
            - ppc_vsx_scalar
            - gcc_sse2_scalar
            - gcc_sse4_scalar
            - gcc_avx_scalar
            - gcc_fma3_scalar
            - gcc_avx2_scalar
            - clang_avx2_scalar

    ##==============================================================================================
    ## All SIMD tests in parallel
    ##==============================================================================================
      - arm_aarch64_simd:
          requires:
            - sync_scalar
      - arm_neon_simd:
          requires:
            - sync_scalar
      - ppc_vsx_simd:
          requires:
            - sync_scalar
      - gcc_sse2_simd:
          requires:
            - sync_scalar
      - gcc_sse4_simd:
          requires:
            - sync_scalar
      - gcc_avx_simd:
          requires:
            - sync_scalar
      - gcc_fma3_simd:
          requires:
            - sync_scalar
      - gcc_avx2_simd:
          requires:
            - sync_scalar
      - clang_avx2_simd:
          requires:
            - sync_scalar
