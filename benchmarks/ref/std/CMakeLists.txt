##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright 2020 Joel FALCOU
##  Copyright 2020 Jean-Thierry LAPRESTE
##
##  Licensed under the MIT License <http://opensource.org/licenses/MIT>.
##  SPDX-License-Identifier: MIT
##==================================================================================================

##==================================================================================================
## Setup aggregation of tests
##==================================================================================================
add_custom_target(std.bench)
add_custom_target(std.scalar.bench)
add_custom_target(std.simd.bench)
add_dependencies(std.bench std.scalar.bench)
add_dependencies(std.bench std.simd.bench)
add_dependencies(bench std.bench)

##==================================================================================================
## List of tests
##==================================================================================================
make_all_benchs(ROOT std NAME abs             ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME acos            ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME acosd           ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME acosh           ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME acospi          ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME acot            ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME acotd           ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME acoth           ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME acotpi          ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME acsc            ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME acscd           ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME acsch           ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME acscpi          ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME add             ARCH scalar TYPES ${all_types}  )
make_all_benchs(ROOT std NAME arg             ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME asec            ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME asecd           ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME asecpi          ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME asin            ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME asind           ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME asinpi          ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME atan            ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME atan2           ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME atan2d          ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME atan2pi         ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME atand           ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME atanh           ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME atanpi          ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME average         ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME binarize        ARCH scalar TYPES ${all_types}  )
make_all_benchs(ROOT std NAME binarize_not    ARCH scalar TYPES ${all_types}  )
make_all_benchs(ROOT std NAME bit_and         ARCH scalar TYPES ${integral_types}  )
make_all_benchs(ROOT std NAME bit_andnot      ARCH scalar TYPES ${integral_types}  )
make_all_benchs(ROOT std NAME bit_ceil        ARCH scalar TYPES ${uint_types} )
make_all_benchs(ROOT std NAME bit_floor       ARCH scalar TYPES ${uint_types} )
make_all_benchs(ROOT std NAME bit_mask        ARCH scalar TYPES ${integral_types} )
make_all_benchs(ROOT std NAME bit_not         ARCH scalar TYPES ${integral_types} )
make_all_benchs(ROOT std NAME bit_notand      ARCH scalar TYPES ${integral_types} )
make_all_benchs(ROOT std NAME bit_notor       ARCH scalar TYPES ${integral_types} )
make_all_benchs(ROOT std NAME bitofsign       ARCH scalar TYPES ${integral_types} )
make_all_benchs(ROOT std NAME bit_or          ARCH scalar TYPES ${integral_types} )
make_all_benchs(ROOT std NAME bit_ornot       ARCH scalar TYPES ${integral_types} )
make_all_benchs(ROOT std NAME bit_select      ARCH scalar TYPES ${integral_types} )
make_all_benchs(ROOT std NAME bit_shl         ARCH scalar TYPES ${integral_types} )
make_all_benchs(ROOT std NAME bit_shr         ARCH scalar TYPES ${integral_types} )
make_all_benchs(ROOT std NAME bit_xor         ARCH scalar TYPES ${integral_types} )
make_all_benchs(ROOT std NAME cbrt            ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME ceil            ARCH scalar TYPES ${all_types}  )
make_all_benchs(ROOT std NAME clamp           ARCH scalar TYPES ${all_types}  )
make_all_benchs(ROOT std NAME copysign        ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME cos             ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME cosd            ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME cosh            ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME cospi           ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME cot             ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME cotd            ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME coth            ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME cotpi           ARCH scalar TYPES ${real_types} )

make_all_benchs(ROOT std NAME floor           ARCH scalar TYPES ${all_types}  )
make_all_benchs(ROOT std NAME fma             ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME frexp           ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME hypot           ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME ldexp           ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME popcount        ARCH scalar TYPES ${uint_types} )
make_all_benchs(ROOT std NAME sin             ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME sinh            ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME tan             ARCH scalar TYPES ${real_types} )
make_all_benchs(ROOT std NAME tanh            ARCH scalar TYPES ${real_types} )