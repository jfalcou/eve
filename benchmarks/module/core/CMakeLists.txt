##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright 2020 Joel FALCOU
##  Copyright 2020 Jean-Thierry LAPRESTE
##
##  Licensed under the MIT License <http://opensource.org/licenses/MIT>.
##  SPDX-License-Identifier: MIT
##==================================================================================================

##==================================================================================================
## Setup aggregation of tests
##==================================================================================================
add_custom_target(core.bench)
add_custom_target(core.scalar.bench)
add_custom_target(core.simd.bench)
add_dependencies(core.bench core.scalar.bench)
add_dependencies(core.bench core.simd.bench)
add_dependencies(bench core.bench)

##==================================================================================================
## List of tests
##==================================================================================================
make_all_benchs(ROOT core NAME abs                ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME acos               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME acosd              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME acosh              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME acospi             ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME acot               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME acotd              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME acoth              ARCH scalar simd TYPES ${real_types}  )
make_all_benchs(ROOT core NAME acotpi             ARCH scalar simd TYPES ${real_types}  )
make_all_benchs(ROOT core NAME acsc               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME acscd              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME acsch              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME acscpi             ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME add                ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME all                ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME any                ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME arg                ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME asec               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME asecd              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME asech              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME asecpi             ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME asin               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME asind              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME asinh              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME asinpi             ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME atan               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME atan2              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME atan2d             ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME atan2pi            ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME atand              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME atanh              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME atanpi             ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME average            ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME binarize          ARCH scalar simd TYPES ${all_types}   )
#make_all_benchs(ROOT core NAME binarize_not      ARCH scalar simd TYPES ${all_types}   )
make_all_benchs(ROOT core NAME bit_and            ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME bit_andnot         ARCH scalar simd TYPES ${all_types}  )
#make_all_benchs(ROOT core NAME bit_cast           ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME bit_mask           ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME bit_not            ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME bit_notand         ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME bit_notor          ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME bitofsign          ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME bit_or             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME bit_ornot          ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME bit_select         ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME bit_shl           ARCH scalar simd TYPES ${integral_types} )
make_all_benchs(ROOT core NAME bit_shr           ARCH scalar simd TYPES ${integral_types} )
make_all_benchs(ROOT core NAME bit_xor            ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME cbrt               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME ceil               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME clamp              ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME conj               ARCH scalar simd TYPES ${real_types} )
#make_all_benchs(ROOT core NAME convert           ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME copysign           ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME cos                ARCH scalar simd TYPES ${real_types} )
#make_all_benchs(ROOT core NAME cosd               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME cosh               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME cospi              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME cot                ARCH scalar simd TYPES ${real_types} )
#make_all_benchs(ROOT core NAME cotd               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME coth               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME cotpi              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME csc                ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME csch               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME cscpi              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME dec                ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME dist               ARCH scalar simd TYPES ${all_types}  )
#make_all_benchs(ROOT core NAME div                ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME eps                ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME exp                ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME exp10              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME exp2               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME expm1              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME exponent           ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME extract            ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME fdim               ARCH scalar simd TYPES ${real_types} )
#make_all_benchs(ROOT core NAME firstbitset        ARCH scalar simd TYPES ${all_types}  )
#make_all_benchs(ROOT core NAME firstbitunset      ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME floor              ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME fma                ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME fms                ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME fnma               ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME fnms               ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME frac               ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME frexp              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME gather             ARCH        simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME horn               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME horn1              ARCH scalar simd TYPES ${real_types} )
#make_all_benchs(ROOT core NAME hypot              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME iceil              ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME if_else            ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME ifloor             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME ifrexp             ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME inc                ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME inearest           ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME iround             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_denormal        ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_equal           ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_eqz             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_even            ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_finite          ARCH scalar simd TYPES ${all_types}  )
#make_all_benchs(ROOT core NAME is_flint           ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_gez             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_greater         ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_greater_equal   ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_gtz             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_imag            ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME is_infinite        ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_less            ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_less_equal      ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_lessgreater     ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_lez             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_ltz             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_nan             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_negative        ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_nez             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_ngez            ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_ngtz            ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_nlez            ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_nltz            ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_normal          ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_not_denormal    ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_not_equal       ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_not_finite      ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_not_greater     ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_not_greater_equal ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_not_imag        ARCH scalar simd TYPES ${real_types} )
#make_all_benchs(ROOT core NAME is_not_infinite    ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME is_not_less        ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_not_less_equal  ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_not_nan         ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_not_real        ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME is_odd             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_ordered         ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_positive        ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME is_pow2            ARCH scalar simd TYPES ${integral_types} )
make_all_benchs(ROOT core NAME is_real            ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME is_unordered       ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME itrunc             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME ldexp              ARCH scalar simd TYPES ${real_types}  )
make_all_benchs(ROOT core NAME log                ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME log10              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME log1p              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME log2               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME logical_and        ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME logical_andnot     ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME logical_not        ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME logical_notand     ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME logical_notor      ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME logical_or         ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME logical_ornot      ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME logical_xor        ARCH scalar simd TYPES ${all_types}  )
#make_all_benchs(ROOT core NAME lookup            ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME manhattan          ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME mantissa           ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME max                ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME maxmag             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME min                ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME minmag             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME minus              ARCH scalar simd TYPES ${all_types}  )
#make_all_benchs(ROOT core NAME modf               ARCH scalar simd TYPES ${real_types}  )
make_all_benchs(ROOT core NAME mul                ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME nbtrue             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME nb_values          ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME nearest            ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME negate             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME negatenz           ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME next               ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME nextafter          ARCH scalar simd TYPES ${real_types}  )
make_all_benchs(ROOT core NAME none               ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME oneminus           ARCH scalar simd TYPES ${real_types}  )
make_all_benchs(ROOT core NAME plus               ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME popcount           ARCH scalar simd TYPES ${integral_types} )
make_all_benchs(ROOT core NAME prev               ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME rec                ARCH scalar simd TYPES ${all_types}  )
#make_all_benchs(ROOT core NAME rem                ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME rempio2            ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME round              ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME rshl               ARCH scalar simd TYPES ${integral_types}  )
make_all_benchs(ROOT core NAME rshr               ARCH scalar simd TYPES ${integral_types}  )
make_all_benchs(ROOT core NAME rsqrt              ARCH scalar simd TYPES ${real_types} )
#make_all_benchs(ROOT core NAME saturate           ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME sec                ARCH scalar simd TYPES ${real_types} )
#make_all_benchs(ROOT core NAME secd               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME sech               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME secpi              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME shl                ARCH scalar simd TYPES ${integral__types} )
make_all_benchs(ROOT core NAME shr                ARCH scalar simd TYPES ${integral_types}  )
#make_all_benchs(ROOT core NAME shuffle            ARCH scalar simd TYPES ${integral_types}  )
make_all_benchs(ROOT core NAME sign               ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME signnz             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME sin                ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME sincos             ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME sincosh            ARCH scalar simd TYPES ${real_types} )
#make_all_benchs(ROOT core NAME sind               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME sinh               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME sinhcosh           ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME sinpi              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME sinpicospi         ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME sqr                ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME sqr_abs            ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME sqrt               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME sub                ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME tan                ARCH scalar simd TYPES ${real_types} )
#make_all_benchs(ROOT core NAME tand               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME tanh               ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME tanpi              ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME tofloat            ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME toint              ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME touint             ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME trunc              ARCH scalar simd TYPES ${all_types}  )
make_all_benchs(ROOT core NAME two_split          ARCH scalar simd TYPES ${real_types} )
make_all_benchs(ROOT core NAME ulpdist            ARCH scalar simd TYPES ${all_types}  )
