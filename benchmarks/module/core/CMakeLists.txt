##==================================================================================================
##  EVE - Expressive Vector Engine
##  Copyright 2019 Joel FALCOU
##  Copyright 2019 Jean-Thierry Lapreste
##
##  Licensed under the MIT License <http://opensource.org/licenses/MIT>.
##  SPDX-License-Identifier: MIT
##==================================================================================================

##==================================================================================================
## Setup aggregation of tests
##==================================================================================================
add_custom_target(core.bench)

##==================================================================================================
## Elementwise function bench tests
##==================================================================================================
make_all_benchs(ROOT core NAME abs                   TYPES ${all_types}     )
make_all_benchs(ROOT core NAME add                   TYPES ${all_types}     )
make_all_benchs(ROOT core NAME arg                   TYPES ${real_types}    )
make_all_benchs(ROOT core NAME average               TYPES ${all_types}     )
make_all_benchs(ROOT core NAME binarize              TYPES ${all_types}     )
make_all_benchs(ROOT core NAME binarize_not          TYPES ${all_types}     )
make_all_benchs(ROOT core NAME bitofsign             TYPES ${all_types}     )
make_all_benchs(ROOT core NAME bit_and               TYPES ${all_types}     )
make_all_benchs(ROOT core NAME bit_andnot            TYPES ${all_types}     )
make_all_benchs(ROOT core NAME bit_cast              TYPES ${all_types}     )
make_all_benchs(ROOT core NAME bit_ceil              TYPES ${uint_or_real_types})
make_all_benchs(ROOT core NAME bit_exponent          TYPES ${real_types}    )
make_all_benchs(ROOT core NAME bit_floor             TYPES ${uint_or_real_types})
make_all_benchs(ROOT core NAME bit_mantissa          TYPES ${real_types}    )
make_all_benchs(ROOT core NAME bit_mask              TYPES ${all_types}     )
make_all_benchs(ROOT core NAME bit_not               TYPES ${all_types}     )
make_all_benchs(ROOT core NAME bit_notand            TYPES ${all_types}     )
make_all_benchs(ROOT core NAME bit_notor             TYPES ${all_types}     )
make_all_benchs(ROOT core NAME bit_or                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME bit_ornot             TYPES ${all_types}     )
#make_all_benchs(ROOT core NAME bit_rshl              TYPES ${integral_types})
#make_all_benchs(ROOT core NAME bit_rshr              TYPES ${integral_types})
make_all_benchs(ROOT core NAME bit_select            TYPES ${all_types}     )
make_all_benchs(ROOT core NAME bit_shl               TYPES ${integral_types})
make_all_benchs(ROOT core NAME bit_shr               TYPES ${integral_types})
make_all_benchs(ROOT core NAME bit_xor               TYPES ${all_types}     )
make_all_benchs(ROOT core NAME bit_width             TYPES ${uint_types}    )
make_all_benchs(ROOT core NAME cbrt                  TYPES ${real_types}    )
make_all_benchs(ROOT core NAME ceil                  TYPES ${all_types}     )
make_all_benchs(ROOT core NAME clamp                 TYPES ${all_types}     )
make_all_benchs(ROOT core NAME conj                  TYPES ${real_types}    )
make_all_benchs(ROOT core NAME convert               TYPES ${all_types}     )
make_all_benchs(ROOT core NAME copysign              TYPES ${real_types}    )
make_all_benchs(ROOT core NAME countl_one            TYPES ${uint_types}    )
make_all_benchs(ROOT core NAME countl_zero           TYPES ${uint_types}    )
make_all_benchs(ROOT core NAME countr_one            TYPES ${uint_types}    )
make_all_benchs(ROOT core NAME countr_zero           TYPES ${uint_types}    )
make_all_benchs(ROOT core NAME dec                   TYPES ${all_types}     )
make_all_benchs(ROOT core NAME dist                  TYPES ${all_types}     )
make_all_benchs(ROOT core NAME div                   TYPES ${all_types}     )
make_all_benchs(ROOT core NAME exponent              TYPES ${real_types}    )
make_all_benchs(ROOT core NAME extract               TYPES ${all_types}     )
make_all_benchs(ROOT core NAME fdim                  TYPES ${real_types}    )
make_all_benchs(ROOT core NAME firstbitset           TYPES ${integral_types})
make_all_benchs(ROOT core NAME firstbitunset         TYPES ${integral_types})
make_all_benchs(ROOT core NAME floor                 TYPES ${all_types}     )
make_all_benchs(ROOT core NAME fma                   TYPES ${all_types}     )
make_all_benchs(ROOT core NAME fms                   TYPES ${all_types}     )
make_all_benchs(ROOT core NAME fnma                  TYPES ${all_types}     )
make_all_benchs(ROOT core NAME fnms                  TYPES ${all_types}     )
make_all_benchs(ROOT core NAME frac                  TYPES ${all_types}     )
make_all_benchs(ROOT core NAME frexp                 TYPES ${real_types}    )
make_all_benchs(ROOT core NAME gather                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME gcd                   TYPES ${integral_types})
make_all_benchs(ROOT core NAME has_single_bit        TYPES ${integral_types})
make_all_benchs(ROOT core NAME horn                  TYPES ${real_types}    )
make_all_benchs(ROOT core NAME horn1                 TYPES ${real_types}    )
make_all_benchs(ROOT core NAME hypot                 TYPES ${real_types}    )
make_all_benchs(ROOT core NAME iceil                 TYPES ${all_types}     )
make_all_benchs(ROOT core NAME if_else               TYPES ${all_types}     )
make_all_benchs(ROOT core NAME ifloor                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME ifrexp                TYPES ${real_types}    )
make_all_benchs(ROOT core NAME inc                   TYPES ${all_types}     )
make_all_benchs(ROOT core NAME inearest              TYPES ${all_types}     )
make_all_benchs(ROOT core NAME iround                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_denormal           TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_equal              TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_eqz                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_even               TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_finite             TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_flint              TYPES ${real_types}     )
make_all_benchs(ROOT core NAME is_gez                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_greater            TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_greater_equal      TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_gtz                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_imag               TYPES ${real_types}    )
make_all_benchs(ROOT core NAME is_infinite           TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_less               TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_less_equal         TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_lessgreater        TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_lez                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_ltz                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_nan                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_negative           TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_nez                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_ngez               TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_ngtz               TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_nlez               TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_nltz               TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_normal             TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_not_denormal       TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_not_equal          TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_not_finite         TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_not_greater        TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_not_greater_equal  TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_not_imag           TYPES ${real_types}    )
make_all_benchs(ROOT core NAME is_not_infinite       TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_not_less           TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_not_less_equal     TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_not_nan            TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_not_real           TYPES ${real_types}    )
make_all_benchs(ROOT core NAME is_odd                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_ordered            TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_positive           TYPES ${all_types}     )
make_all_benchs(ROOT core NAME is_pow2               TYPES ${integral_types})
make_all_benchs(ROOT core NAME is_real               TYPES ${real_types}    )
make_all_benchs(ROOT core NAME is_unordered          TYPES ${all_types}     )
make_all_benchs(ROOT core NAME itrunc                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME lcm                   TYPES ${integral_types})
make_all_benchs(ROOT core NAME ldexp                 TYPES ${real_types}    )
make_all_benchs(ROOT core NAME lerp                  TYPES ${real_types}    )
make_all_benchs(ROOT core NAME logical_and           TYPES ${all_types}     )
make_all_benchs(ROOT core NAME logical_andnot        TYPES ${all_types}     )
make_all_benchs(ROOT core NAME logical_not           TYPES ${all_types}     )
make_all_benchs(ROOT core NAME logical_notand        TYPES ${all_types}     )
make_all_benchs(ROOT core NAME logical_notor         TYPES ${all_types}     )
make_all_benchs(ROOT core NAME logical_or            TYPES ${all_types}     )
make_all_benchs(ROOT core NAME logical_ornot         TYPES ${all_types}     )
make_all_benchs(ROOT core NAME logical_xor           TYPES ${all_types}     )
make_all_benchs(ROOT core NAME lookup                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME manhattan             TYPES ${real_types}    )
make_all_benchs(ROOT core NAME mantissa              TYPES ${real_types}    )
make_all_benchs(ROOT core NAME max                   TYPES ${all_types}     )
make_all_benchs(ROOT core NAME maxmag                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME min                   TYPES ${all_types}     )
make_all_benchs(ROOT core NAME minmag                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME minus                 TYPES ${all_types}     )
make_all_benchs(ROOT core NAME modf                  TYPES ${real_types}     )
make_all_benchs(ROOT core NAME mul                   TYPES ${all_types}     )
make_all_benchs(ROOT core NAME nbtrue                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME nb_values             TYPES ${all_types}     )
make_all_benchs(ROOT core NAME nearest               TYPES ${all_types}     )
make_all_benchs(ROOT core NAME negate                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME negatenz              TYPES ${all_types}     )
make_all_benchs(ROOT core NAME next                  TYPES ${all_types}     )
make_all_benchs(ROOT core NAME nextafter             TYPES ${all_types}     )
make_all_benchs(ROOT core NAME none                  TYPES ${all_types}     )
make_all_benchs(ROOT core NAME oneminus              TYPES ${signed_types}     )
make_all_benchs(ROOT core NAME plus                  TYPES ${all_types}     )
make_all_benchs(ROOT core NAME popcount              TYPES ${integral_types})
make_all_benchs(ROOT core NAME prev                  TYPES ${all_types}     )
make_all_benchs(ROOT core NAME rec                   TYPES ${all_types}     )
make_all_benchs(ROOT core NAME reduce                TYPES ${real_types}    )
make_all_benchs(ROOT core NAME reduce_fast           TYPES ${real_types}    )
make_all_benchs(ROOT core NAME reduce_large          TYPES ${real_types}    )
make_all_benchs(ROOT core NAME reduce_medium         TYPES ${real_types}    )
make_all_benchs(ROOT core NAME rem                   TYPES ${signed_types}  )
make_all_benchs(ROOT core NAME rotl                  TYPES ${uint_types}    )
make_all_benchs(ROOT core NAME rotr                  TYPES ${uint_types}    )
make_all_benchs(ROOT core NAME round                 TYPES ${all_types}     )
make_all_benchs(ROOT core NAME rshl                  TYPES ${integral_types})
make_all_benchs(ROOT core NAME rshr                  TYPES ${integral_types})
make_all_benchs(ROOT core NAME rsqrt                 TYPES ${real_types}    )
make_all_benchs(ROOT core NAME saturate              TYPES ${all_types}     )
make_all_benchs(ROOT core NAME shl                   TYPES ${integral_types})
make_all_benchs(ROOT core NAME shr                   TYPES ${integral_types})
# make_all_benchs(ROOT core NAME shuffle              simd TYPES ${integral_types})
make_all_benchs(ROOT core NAME sign                  TYPES ${all_types}     )
make_all_benchs(ROOT core NAME signnz                TYPES ${all_types}     )
make_all_benchs(ROOT core NAME sqr                   TYPES ${all_types}     )
make_all_benchs(ROOT core NAME sqr_abs               TYPES ${real_types}    )
make_all_benchs(ROOT core NAME sqrt                  TYPES ${real_types}    )
make_all_benchs(ROOT core NAME sub                   TYPES ${all_types}     )
make_all_benchs(ROOT core NAME trunc                 TYPES ${all_types}     )
make_all_benchs(ROOT core NAME ulpdist               TYPES ${all_types}     )
